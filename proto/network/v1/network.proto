syntax = "proto3";

package network.v1;

option go_package = "github.com/Lagrange-Labs/lagrange-node/network/types";

// NetworkService is the service for the attestation network
service NetworkService {
    // JoinNetwork is the rpc endpoint for joining the network
    rpc JoinNetwork(JoinNetworkRequest) returns (JoinNetworkResponse);
    // GetBlock is the rpc endpoint for getting the given block at the client node
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
    // CommitBlock is the rpc endpoint for committing the given block with signature at the client node
    rpc CommitBlock(CommitBlockRequest) returns (CommitBlockResponse);
}

// StorageItem is the item for the storage data
message StorageItem {
    string skey = 1;
    string svalue = 2;
}

message StorageItemList {
    repeated StorageItem items = 1;
}

// DeltaItem is the item for the state change
message DeltaItem {
    string address = 1;
    string key = 2;
    oneof value {
        string string_value = 3;
        StorageItemList storage_value = 4;
    }
}

// BlockDelta is the delta data for the given block of the specific chain
message BlockDelta {
    uint64 block_number = 1;
    string state_root = 2;
    string chain = 3;
    repeated DeltaItem delta = 4;
    string delta_hash = 5;
}

// BlockHeader is the block header structure
message BlockHeader {
    uint64 block_number = 1;
    string parent_hash = 2;
    string block_hash = 3;
    string proposer_pub_key = 4;
    string proposer_signature = 5; // (block_hash)
}

// Block is the block body structure for zk proofs of the block delta
message Block {
    BlockHeader header = 1;
    BlockDelta delta = 2;
    string proof = 3;
    string signature = 4; // aggregated signature of all the validators
}

// JoinNetworkRequest is the request to join the network
message JoinNetworkRequest {
    string public_key = 1;
    string stake_address = 2;
    string signature = 3;
}

// JoinNetworkResponse is the response for joining the network
message JoinNetworkResponse {
    bool result = 1;
    string message = 2;
}

// GetBlockRequest is the request to get the given block 
message GetBlockRequest {
    uint64 block_number = 1;
}

// GetBlockResponse is the response for getting the given block
message GetBlockResponse {
    Block block = 1;
}

// CommitBlockRequest is the request to commit the signature
message CommitBlockRequest {
    uint64 block_number = 1;
    string signature = 2;
}

// CommitBlockResponse is the response for uploading the signature
message CommitBlockResponse {
    bool result = 1;
    string message = 2;
}