// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package committee

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ILagrangeCommitteeCommitteeData is an auto generated low-level Go binding around an user-defined struct.
type ILagrangeCommitteeCommitteeData struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}

// OperatorUpdate is an auto generated low-level Go binding around an user-defined struct.
type OperatorUpdate struct {
	Operator   common.Address
	UpdateType uint8
}

// VoteWeigherBaseStorageStrategyAndWeightingMultiplier is an auto generated low-level Go binding around an user-defined struct.
type VoteWeigherBaseStorageStrategyAndWeightingMultiplier struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// CommitteeMetaData contains all meta data concerning the Committee contract.
var CommitteeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractILagrangeService\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"contractIServiceManager\",\"name\":\"_serviceManager\",\"type\":\"address\"},{\"internalType\":\"contractIStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"name\":\"InitCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contractIStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contractIStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"current\",\"type\":\"bytes32\"}],\"name\":\"UpdateCommittee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNT_CREATION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORISE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMITTEE_CURRENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMITTEE_NEXT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERMEZ_NETWORK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_OF_QUORUMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TYPE_AMOUNT_CHANGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TYPE_REGISTER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_TYPE_UNREGISTER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contractIStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"structVoteWeigherBaseStorage.StrategyAndWeightingMultiplier[]\",\"name\":\"_newStrategiesConsideredAndMultipliers\",\"type\":\"tuple[]\"}],\"name\":\"addStrategiesConsideredAndMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committeeAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committeeLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeeLeavesMap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"committeeParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contractIDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"internalType\":\"structILagrangeCommittee.CommitteeData\",\"name\":\"currentCommittee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nextRoot\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opAddr\",\"type\":\"address\"}],\"name\":\"getLeafHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"getNext1CommitteeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getServeUntilBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getSlashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon1Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon2Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon3Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon4Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon5Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon6Elements\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"isUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"strategyIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"newMultipliers\",\"type\":\"uint96[]\"}],\"name\":\"modifyStrategyWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"slashed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quorumBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"},{\"internalType\":\"contractIStrategy[]\",\"name\":\"_strategiesToRemove\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indicesToRemove\",\"type\":\"uint256[]\"}],\"name\":\"removeStrategiesConsideredAndMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contractILagrangeService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceManager\",\"outputs\":[{\"internalType\":\"contractIServiceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setSlashed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategiesConsideredAndMultipliers\",\"outputs\":[{\"internalType\":\"contractIStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"}],\"name\":\"strategiesConsideredAndMultipliersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contractIStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"updateType\",\"type\":\"uint8\"}],\"internalType\":\"structOperatorUpdate\",\"name\":\"opUpdate\",\"type\":\"tuple\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"updatedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updatedOperators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"updateType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorumNumber\",\"type\":\"uint256\"}],\"name\":\"weightOfOperator\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101406040523480156200001257600080fd5b5060405162003c9a38038062003c9a83398101604081905262000035916200025f565b808260058282826200004b565b60405180910390fd5b6001600160a01b03831660a08190526040805163df5cf72360e01b8152905163df5cf723916004808201926020929091908290030181865afa15801562000096573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bc9190620002b3565b6001600160a01b03166080816001600160a01b031681525050826001600160a01b031663b13442716040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a9190620002b3565b6001600160a01b0390811660c052821660e05260ff8116610100526200015f62000187565b5050506001600160a01b03861661012052506200017e91505062000187565b505050620002da565b600054610100900460ff1615620001f15760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840162000042565b60005460ff908116101562000244576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200025c57600080fd5b50565b6000806000606084860312156200027557600080fd5b8351620002828162000246565b6020850151909350620002958162000246565b6040850151909250620002a88162000246565b809150509250925092565b600060208284031215620002c657600080fd5b8151620002d38162000246565b9392505050565b60805160a05160c05160e0516101005161012051613931620003696000396000818161083b01528181610fba01526123a10152600081816108fc0152818161097701526117290152600081816104de01528181610a7c015281816115830152818161192a0152611cd2015260006107c70152600061051d0152600081816108d501526117fb01526139316000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c80637d99c86411610182578063bf988ab6116100e9578063df5cf723116100a2578063f1f2fcab1161007c578063f1f2fcab14610301578063f2fde38b14610945578063f5425bd514610958578063f74c54cc1461096057600080fd5b8063df5cf723146108d0578063e21ade6d146108f7578063e62f6b921461091e57600080fd5b8063bf988ab6146107fc578063c473af331461080f578063d598d4c914610836578063d742da1a1461085d578063da16ce8314610865578063def9e7d51461089657600080fd5b8063a3c96ce51161013b578063a3c96ce51461072e578063a63490a214610741578063a73db0711461077b578063ab4756fc1461078e578063b1344271146107c2578063bf7cfebb146107e957600080fd5b80637d99c8641461069d57806385ab9a7a146106a5578063878d8667146106b8578063891f28a5146106cb5780638da5cb5b146106f65780639e4e73181461070757600080fd5b80633644e515116102415780634db6f74a116101fa5780636bbc5310116101d45780636bbc531014610625578063715018a614610638578063728564551461064057806378d81d081461068a57600080fd5b80634db6f74a146105df5780634e0cf846146105ff5780635b7b108c1461061257600080fd5b80633644e515146104305780633998fdd3146104d957806339b70e38146105185780633bc728051461053f57806344a5c4bf1461055257806344f5b6b41461059957600080fd5b80631d393c09116102935780631d393c091461039b5780631ea1afe1146103b557806323097e86146103ef57806328420dfa146103f75780633408e47014610417578063358764761461041d57600080fd5b80630191f72c146102db57806304622c2e14610301578063046684dc14610328578063108055781461033d5780631300aff01461035057806313e7c9d814610377575b600080fd5b6102ee6102e9366004613086565b610973565b6040519081526020015b60405180910390f35b6102ee7fbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad81565b61033b6103363660046130b8565b610a57565b005b61033b61034b366004613137565b610a7a565b6102ee7fff946cf82975b1a2b6e6d28c9a76a4b8d7a1fd0592b785cb92771933310f9ee781565b61038a6103853660046131c6565b610c4c565b6040516102f89594939291906131e3565b6103a3600381565b60405160ff90911681526020016102f8565b6103c86103c336600461326a565b610d16565b604080516001600160a01b0390931683526001600160601b039091166020830152016102f8565b6103a3600281565b6102ee610405366004613086565b606c6020526000908152604090205481565b466102ee565b61033b61042b36600461328c565b610d5f565b6102ee60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7fbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6105007f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102f8565b6105007f000000000000000000000000000000000000000000000000000000000000000081565b61033b61054d366004613322565b610eda565b6105846105603660046131c6565b6001600160a01b031660009081526073602052604090206002015463ffffffff1690565b60405163ffffffff90911681526020016102f8565b6105cf6105a73660046131c6565b6001600160a01b0316600090815260736020526040902060020154600160401b900460ff1690565b60405190151581526020016102f8565b6102ee6105ed36600461334c565b60746020526000908152604090205481565b61033b61060d3660046133d7565b610faf565b6102ee6106203660046131c6565b6110ca565b61033b6106333660046134b7565b611581565b61033b61163d565b61066f61064e36600461334c565b606e6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102f8565b6102ee610698366004613322565b611651565b6102ee600181565b6105cf6106b3366004613322565b61168e565b6102ee6106c6366004613322565b6116f3565b6106de6106d936600461359f565b611724565b6040516001600160601b0390911681526020016102f8565b6033546001600160a01b0316610500565b6102ee7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61033b61073c366004613137565b611928565b61066f61074f366004613322565b606f60209081526000928352604080842090915290825290208054600182015460029092015490919083565b61033b6107893660046135bd565b611cc7565b6107a161079c366004613322565b611e13565b604080516001600160a01b03909316835260ff9091166020830152016102f8565b6105007f000000000000000000000000000000000000000000000000000000000000000081565b6102ee6107f736600461334c565b611e56565b61050061080a366004613322565b61224c565b6102ee7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6105007f000000000000000000000000000000000000000000000000000000000000000081565b6103a3600181565b610584610873366004613604565b607160209081526000928352604080842090915290825290205463ffffffff1681565b6108a96108a4366004613322565b612284565b604080518351815260208085015190820152928101519083015260608201526080016102f8565b6105007f000000000000000000000000000000000000000000000000000000000000000081565b6102ee7f000000000000000000000000000000000000000000000000000000000000000081565b6102ee7fafd642c6a37a2e6887dc4ad5142f84197828a904e53d3204ecb1100329231eaa81565b61033b6109533660046131c6565b61231d565b6102ee600081565b61033b61096e3660046131c6565b612396565b60007f00000000000000000000000000000000000000000000000000000000000000008210610a445760405162461bcd60e51b815260206004820152606660248201527f566f746557656967686572426173652e73747261746567696573436f6e73696460448201527f65726564416e644d756c7469706c696572734c656e6774683a2071756f72756d60648201527f4e756d62657220696e7075742065786365656473204e554d4245525f4f465f51608482015265554f52554d5360d01b60a482015260c4015b60405180910390fd5b506000908152606b602052604090205490565b610a5f61240b565b610a6a838383612465565b610a758360006125cd565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc919061363b565b6001600160a01b0316336001600160a01b031614610b2c5760405162461bcd60e51b8152600401610a3b90613658565b82818114610ba25760405162461bcd60e51b815260206004820152603c60248201527f566f746557656967686572426173652e6d6f646966795374726174656779576560448201527f69676874733a20696e707574206c656e677468206d69736d61746368000000006064820152608401610a3b565b60005b81811015610c4357838382818110610bbf57610bbf61368f565b9050602002016020810190610bd491906136a5565b6000888152606b60205260409020878784818110610bf457610bf461368f565b9050602002013581548110610c0b57610c0b61368f565b600091825260209091200180546001600160601b0392909216600160a01b026001600160a01b03909216919091179055600101610ba5565b50505050505050565b60736020526000908152604090208054600182018054919291610c6e906136c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9a906136c0565b8015610ce75780601f10610cbc57610100808354040283529160200191610ce7565b820191906000526020600020905b815481529060010190602001808311610cca57829003601f168201915b5050506002909301549192505063ffffffff80821691600160201b81049091169060ff600160401b9091041685565b606b6020528160005260406000208181548110610d3257600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b600054610100900460ff1615808015610d7f5750600054600160ff909116105b80610d995750303b158015610d99575060005460ff166001145b610dfc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a3b565b6000805460ff191660011790558015610e1f576000805461ff0019166101001790555b606580546001600160a01b03199081166001600160a01b03808b1691909117909255606680548216838a16179055606780548216838916179055606880548216838816179055606980548216838716179055606a8054909116918416919091179055610e8a8861275a565b8015610ed0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610ee4828261168e565b610f4a5760405162461bcd60e51b815260206004820152603160248201527f426c6f636b206e756d626572206973207072696f7220746f20636f6d6d69747460448201527032b290333932b2bd32903bb4b73237bb9760791b6064820152608401610a3b565b63ffffffff82166000908152607460205260409020548111610fa15760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c903ab83230ba32b21760811b6044820152606401610a3b565b610fab82826125cd565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ff75760405162461bcd60e51b8152600401610a3b906136fb565b6000611004856001611724565b6040805160a0810182526001600160601b0383168152602080820188815263ffffffff80881684860152881660608401526000608084018190526001600160a01b038b16815260738352939093208251815592518051949550919361106f9260018501920190612f57565b5060408201516002909101805460608401516080909401511515600160401b0260ff60401b1963ffffffff958616600160201b0267ffffffffffffffff19909316959094169490941717919091169190911790555050505050565b60006110d4612fdb565b600060736000856001600160a01b03166001600160a01b031681526020019081526020016000206040518060a001604052908160008201548152602001600182018054611120906136c0565b80601f016020809104026020016040519081016040528092919081815260200182805461114c906136c0565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b50505091835250506002919091015463ffffffff8082166020840152600160201b8204166040830152600160401b900460ff161515606090910152905060005b60088110156112cc5760408051600c80825281830190925260009160208201818036833701905050905060005b600c8110156112805760208401518161122085600c61375e565b61122a919061377d565b8151811061123a5761123a61368f565b602001015160f81c60f81b8282815181106112575761125761368f565b60200101906001600160f81b031916908160001a9053508061127881613795565b915050611206565b50600061128c826137b0565b90508060a01c8584600b81106112a4576112a461368f565b6001600160601b039092166020929092020152508190506112c481613795565b9150506111d9565b5080516040516000916113179187919060200160609290921b6bffffffffffffffffffffffff1916825260801b6fffffffffffffffffffffffffffffffff1916601482015260240190565b604051602081830303815290604052905060005b60038110156114255760408051600c80825281830190925260009160208201818036833701905050905060005b600c8110156113ce57838161136e85600c61375e565b611378919061377d565b815181106113885761138861368f565b602001015160f81c60f81b8282815181106113a5576113a561368f565b60200101906001600160f81b031916908160001a905350806113c681613795565b915050611358565b5060006113da826137b0565b905060a081901c866113ed85600861377d565b600b81106113fd576113fd61368f565b6001600160601b0390921660209290920201525081905061141d81613795565b91505061132b565b50604080516101008101825284516001600160601b039081168284019081526020870151821660608085019190915293870151821660808085019190915293870151821660a0840152928601511660c082015261157891819061149e9060e0830188600560200201516001600160601b031690526127ac565b81526020016115716040518060a00160405280886006600b81106114c4576114c461368f565b60200201516001600160601b03168152602001886007600b81106114ea576114ea61368f565b60200201516001600160601b03168152602001886008600b81106115105761151061368f565b60200201516001600160601b03168152602001886009600b81106115365761153661368f565b60200201516001600160601b0316815260200188600a600b811061155c5761155c61368f565b60200201516001600160601b0316905261281e565b905261284f565b95945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611603919061363b565b6001600160a01b0316336001600160a01b0316146116335760405162461bcd60e51b8152600401610a3b90613658565b610fab8282612880565b61164561240b565b61164f600061275a565b565b63ffffffff82166000908152606e6020526040812080546001909101548061167983866137e7565b61168391906137fe565b61157890600161377d565b63ffffffff82166000908152606e6020526040812080546001909101548291906116b8908561375e565b6116c2919061377d565b63ffffffff85166000908152606e60205260409020600201549091506116e881836137e7565b431195945050505050565b6070602052816000526040600020818154811061170f57600080fd5b90600052602060002001600091509150505481565b6000807f000000000000000000000000000000000000000000000000000000000000000083101561192157600061175a84610973565b604080518082019091526000808252602082015290915060005b8281101561191d576000868152606b6020526040902080548290811061179c5761179c61368f565b6000918252602080832060408051808201825293909101546001600160a01b03808216808652600160a01b9092046001600160601b031693850193909352905163778e55f360e01b81528b8316600482015260248101919091529194507f0000000000000000000000000000000000000000000000000000000000000000169063778e55f390604401602060405180830381865afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118669190613820565b90508015611914576020830151835160405163f3e7387560e01b815260048101849052670de0b6b3a7640000926001600160601b0316916001600160a01b03169063f3e73875906024016020604051808303816000875af11580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f39190613820565b6118fd919061375e565b61190791906137fe565b6119119086613839565b94505b50600101611774565b5050505b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa919061363b565b6001600160a01b0316336001600160a01b0316146119da5760405162461bcd60e51b8152600401610a3b90613658565b82818114611a645760405162461bcd60e51b815260206004820152604b60248201527f566f746557656967686572426173652e72656d6f76655374726174656769657360448201527f436f6e73696465726564416e64576569676874733a20696e707574206c656e6760648201526a0e8d040dad2e6dac2e8c6d60ab1b608482015260a401610a3b565b60005b81811015610c4357858582818110611a8157611a8161368f565b9050602002016020810190611a9691906131c6565b6001600160a01b0316606b6000898152602001908152602001600020858584818110611ac457611ac461368f565b9050602002013581548110611adb57611adb61368f565b6000918252602090912001546001600160a01b031614611b715760405162461bcd60e51b815260206004820152604560248201527f566f746557656967686572426173652e72656d6f76655374726174656769657360448201527f436f6e73696465726564416e64576569676874733a20696e64657820696e636f6064820152641c9c9958dd60da1b608482015260a401610a3b565b6000878152606b602052604090208054611b8d906001906137e7565b81548110611b9d57611b9d61368f565b90600052602060002001606b6000898152602001908152602001600020858584818110611bcc57611bcc61368f565b9050602002013581548110611be357611be361368f565b600091825260208083208454920180546001600160a01b0319166001600160a01b03909316928317815593546001600160601b03600160a01b918290041602909117909255888152606b90915260409020805480611c4357611c43613864565b600082815260208120820160001990810191909155019055867f327495b508542e8eeed9261ee4edc99d913ed525014a835e67fe5c1669c7c8b4878784818110611c8f57611c8f61368f565b9050602002016020810190611ca491906131c6565b6040516001600160a01b03909116815260200160405180910390a2600101611a67565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d5d5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c79204c616772616e67652073657276696365206d616e61676572206361604482015274371031b0b636103a3434b990333ab731ba34b7b71760591b6064820152608401610a3b565b602081015160ff1660021415611da2578051611d7a906001611724565b81516001600160a01b031660009081526073602052604090206001600160601b039190911690555b80516001600160a01b0390811660009081526073602090815260408083206002015463ffffffff600160201b909104168352606d82528220805460018101825590835291819020845192018054919094015160ff16600160a01b026001600160a81b03199091169190921617179055565b606d6020528160005260406000208181548110611e2f57600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900460ff16905082565b63ffffffff8116600090815260706020526040812054611e9557611e8f604051806040016040528060008152602001600081525061284f565b92915050565b63ffffffff821660009081526070602052604090205460011415611eeb5763ffffffff821660009081526070602052604081208054909190611ed957611ed961368f565b90600052602060002001549050919050565b63ffffffff82166000908152607060205260409020546002906001905b80831015611f2d57611f1b60028461375e565b9250611f2682613795565b9150611f08565b6000611f3a83600161377d565b67ffffffffffffffff811115611f5257611f52613367565b604051908082528060200260200182016040528015611f7b578160200160208202803683370190505b50905060008060015b848110156120a85763ffffffff8916600090815260706020526040812080549193509082908110611fb757611fb761368f565b600091825260208083209091015463ffffffff8c16835260709091526040909120909350611fe66001836137e7565b81548110611ff657611ff661368f565b9060005260206000200154846000815181106120145761201461368f565b6020026020010181815250505b600181831c8116141561207857612064604051806040016040528086858151811061204e5761204e61368f565b602002602001015181526020018581525061284f565b92508161207081613795565b925050612021565b8284838151811061208b5761208b61368f565b60209081029190910101526120a160028261377d565b9050611f84565b848114156121805763ffffffff891660009081526070602052604090206120d06001836137e7565b815481106120e0576120e061368f565b9060005260206000200154846000815181106120fe576120fe61368f565b60200260200101818152505060009150600092505b600181831c8116141561215457612140604051806040016040528086858151811061204e5761204e61368f565b92508161214c81613795565b925050612113565b828483815181106121675761216761368f565b602090810291909101015261217d60028261377d565b90505b6000846000815181106121955761219561368f565b6020026020010181815250505b868110156122245760009150600092505b600181831c811614156121f4576121e0604051806040016040528086858151811061204e5761204e61368f565b9250816121ec81613795565b9250506121b3565b828483815181106122075761220761368f565b602090810291909101015261221d60028261377d565b90506121a2565b8386815181106122365761223661368f565b6020026020010151975050505050505050919050565b6072602052816000526040600020818154811061226857600080fd5b6000918252602090912001546001600160a01b03169150829050565b6122a860405180606001604052806000815260200160008152602001600081525090565b6000806122b58585611651565b905060006122c88661069887600161377d565b63ffffffff9096166000908152606f6020908152604080832094835284825280832081516060810183528154815260018201548185015260029091015481830152988352939052919091205494959350505050565b61232561240b565b6001600160a01b03811661238a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a3b565b6123938161275a565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146123de5760405162461bcd60e51b8152600401610a3b906136fb565b6001600160a01b03166000908152607360205260409020600201805460ff60401b1916600160401b179055565b6033546001600160a01b0316331461164f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a3b565b63ffffffff83166000908152606e6020526040902054156124d85760405162461bcd60e51b815260206004820152602760248201527f436f6d6d69747465652068617320616c7265616479206265656e20696e69746960448201526630b634bd32b21760c91b6064820152608401610a3b565b6040805160608082018352438252602080830186815283850186815263ffffffff89166000818152606e8552878120965187559251600180880191909155915160029687015586519485018752828552848401838152858801848152828552606f865288852085805286528885209651875590519286019290925590519390940192909255835182815280820180865293835260709091529290209151612580929190612ffa565b506040805163ffffffff85168152602081018490529081018290527fd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc49060600160405180910390a1505050565b60005b63ffffffff83166000908152606d60205260409020548110156126ab5763ffffffff83166000908152606d602052604081208054839081106126145761261461368f565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900460ff1691810182905291506001141561266257805161265d90612b22565b612698565b602081015160ff166002141561267d57805161265d90612be5565b602081015160ff166003141561269857805161269890612c6a565b50806126a381613795565b9150506125d0565b506126b68282612e3b565b63ffffffff82166000908152607460209081526040808320849055606d90915281206126e191613034565b63ffffffff82166000908152606f602052604081207fc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd9089184919061272660018661377d565b8152602080820192909252604090810160002054815163ffffffff9094168452918301919091520160405180910390a15050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606a54604051631eb694f160e31b81526000916001600160a01b03169063f5b4a788906127dd90859060040161387a565b602060405180830381865afa1580156127fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8f9190613820565b606954604051630926f44b60e31b81526000916001600160a01b031690634937a258906127dd9085906004016138ab565b6066546040516314d2f97b60e11b81526000916001600160a01b0316906329a5f2f6906127dd9085906004016138d3565b80516000838152606b60209081526040909120549061289f838361377d565b11156129395760405162461bcd60e51b815260206004820152605b60248201527f566f746557656967686572426173652e5f61646453747261746567696573436f60448201527f6e73696465726564416e644d756c7469706c696572733a20657863656564204d60648201527f41585f5745494748494e475f46554e4354494f4e5f4c454e4754480000000000608482015260a401610a3b565b60005b82811015612b1b5760005b612951828461377d565b811015612a505784828151811061296a5761296a61368f565b6020026020010151600001516001600160a01b0316606b600088815260200190815260200160002082815481106129a3576129a361368f565b6000918252602090912001546001600160a01b03161415612a485760405162461bcd60e51b815260206004820152605360248201527f566f746557656967686572426173652e5f61646453747261746567696573436f60448201527f6e73696465726564416e644d756c7469706c696572733a2063616e6e6f7420616064820152720c8c840e6c2daca40e6e8e4c2e8cacef24064f606b1b608482015260a401610a3b565b600101612947565b506000858152606b602052604090208451859083908110612a7357612a7361368f565b6020908102919091018101518254600181018455600093845292829020815191909201516001600160601b0316600160a01b026001600160a01b0390911617910155835185907fa9d6f91aa411cbebcc7bd4c1f2685e2f4677353ebadfba370f19a365ea679d9290869084908110612aed57612aed61368f565b602090810291909101810151516040516001600160a01b0390911681520160405180910390a260010161293c565b5050505050565b6001600160a01b038116600090815260736020908152604080832060020154600160201b900463ffffffff168084526070909252909120805490612b65846110ca565b815460018181018455600093845260208085209092019290925563ffffffff9485168084526071825260408085206001600160a01b0390981680865297835280852080549790961663ffffffff199097169690961790945592825260728352928120805493840181558152200180546001600160a01b0319169091179055565b6001600160a01b03811660008181526073602090815260408083206002015463ffffffff600160201b909104811680855260718452828520958552949092529091205416612c32836110ca565b63ffffffff83166000908152607060205260409020805483908110612c5957612c5961368f565b600091825260209091200155505050565b6001600160a01b03811660008181526073602090815260408083206002015463ffffffff600160201b9091048116808552607184528285209585529483528184205485855260709093529083205491169190612cc8906001906137e7565b63ffffffff841660009081526072602052604081208054929350909183908110612cf457612cf461368f565b600091825260208083209091015463ffffffff871683526070909152604090912080546001600160a01b0390921692509083908110612d3557612d3561368f565b9060005260206000200154607060008663ffffffff1663ffffffff1681526020019081526020016000208463ffffffff1681548110612d7657612d7661368f565b60009182526020808320919091019290925563ffffffff8681168083526071845260408084206001600160a01b03871685528552808420805463ffffffff1916938916939093179092558252607090925220805480612dd757612dd7613864565b60008281526020808220830160001990810183905590920190925563ffffffff861682526072905260409020805480612e1257612e12613864565b600082815260209020810160001990810180546001600160a01b03191690550190555050505050565b6000612e4683611e56565b90506000612e5560018461377d565b63ffffffff8516600090815260706020908152604080832054606f835281842085855290925290912060018101919091558390559050612e9484612ebf565b63ffffffff9094166000908152606f6020908152604080832093835292905220600201929092555050565b600080805b63ffffffff8416600090815260726020526040902054811015612f505763ffffffff841660009081526072602052604081208054607392919084908110612f0d57612f0d61368f565b60009182526020808320909101546001600160a01b03168352820192909252604001902054612f3c908361377d565b915080612f4881613795565b915050612ec4565b5092915050565b828054612f63906136c0565b90600052602060002090601f016020900481019282612f855760008555612fcb565b82601f10612f9e57805160ff1916838001178555612fcb565b82800160010185558215612fcb579182015b82811115612fcb578251825591602001919060010190612fb0565b50612fd7929150613052565b5090565b604051806101600160405280600b906020820280368337509192915050565b828054828255906000526020600020908101928215612fcb5791602002820182811115612fcb578251825591602001919060010190612fb0565b50805460008255906000526020600020908101906123939190613067565b5b80821115612fd75760008155600101613053565b5b80821115612fd75780546001600160a81b0319168155600101613068565b60006020828403121561309857600080fd5b5035919050565b803563ffffffff811681146130b357600080fd5b919050565b6000806000606084860312156130cd57600080fd5b6130d68461309f565b95602085013595506040909401359392505050565b60008083601f8401126130fd57600080fd5b50813567ffffffffffffffff81111561311557600080fd5b6020830191508360208260051b850101111561313057600080fd5b9250929050565b60008060008060006060868803121561314f57600080fd5b85359450602086013567ffffffffffffffff8082111561316e57600080fd5b61317a89838a016130eb565b9096509450604088013591508082111561319357600080fd5b506131a0888289016130eb565b969995985093965092949392505050565b6001600160a01b038116811461239357600080fd5b6000602082840312156131d857600080fd5b8135611921816131b1565b8581526000602060a08184015286518060a085015260005b818110156132175788810183015185820160c0015282016131fb565b8181111561322957600060c083870101525b50601f01601f1916830160c001915061324c9050604083018663ffffffff169052565b63ffffffff8416606083015282151560808301529695505050505050565b6000806040838503121561327d57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a0312156132a757600080fd5b87356132b2816131b1565b965060208801356132c2816131b1565b955060408801356132d2816131b1565b945060608801356132e2816131b1565b935060808801356132f2816131b1565b925060a0880135613302816131b1565b915060c0880135613312816131b1565b8091505092959891949750929550565b6000806040838503121561333557600080fd5b61333e8361309f565b946020939093013593505050565b60006020828403121561335e57600080fd5b6119218261309f565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156133a0576133a0613367565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156133cf576133cf613367565b604052919050565b600080600080608085870312156133ed57600080fd5b84356133f8816131b1565b935060208581013567ffffffffffffffff8082111561341657600080fd5b818801915088601f83011261342a57600080fd5b81358181111561343c5761343c613367565b61344e601f8201601f191685016133a6565b9150808252898482850101111561346457600080fd5b80848401858401376000848284010152508095505050506134876040860161309f565b91506134956060860161309f565b905092959194509250565b80356001600160601b03811681146130b357600080fd5b60008060408084860312156134cb57600080fd5b8335925060208085013567ffffffffffffffff808211156134eb57600080fd5b818701915087601f8301126134ff57600080fd5b81358181111561351157613511613367565b61351f848260051b016133a6565b818152848101925060069190911b83018401908982111561353f57600080fd5b928401925b8184101561358f5785848b03121561355c5760008081fd5b61356461337d565b843561356f816131b1565b815261357c8587016134a0565b8187015283529285019291840191613544565b8096505050505050509250929050565b600080604083850312156135b257600080fd5b823561333e816131b1565b6000604082840312156135cf57600080fd5b6135d761337d565b82356135e2816131b1565b8152602083013560ff811681146135f857600080fd5b60208201529392505050565b6000806040838503121561361757600080fd5b6136208361309f565b91506020830135613630816131b1565b809150509250929050565b60006020828403121561364d57600080fd5b8151611921816131b1565b60208082526017908201527f6f6e6c79536572766963654d616e616765724f776e6572000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156136b757600080fd5b611921826134a0565b600181811c908216806136d457607f821691505b602082108114156136f557634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4f6e6c79204c616772616e676520736572766963652063616e2063616c6c207460408201526c3434b990333ab731ba34b7b71760991b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561377857613778613748565b500290565b6000821982111561379057613790613748565b500190565b60006000198214156137a9576137a9613748565b5060010190565b805160208201516001600160a01b0319808216929190600c8310156137df57808184600c0360031b1b83161693505b505050919050565b6000828210156137f9576137f9613748565b500390565b60008261381b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561383257600080fd5b5051919050565b60006001600160601b0380831681851680830382111561385b5761385b613748565b01949350505050565b634e487b7160e01b600052603160045260246000fd5b60c08101818360005b60068110156138a2578151835260209283019290910190600101613883565b50505092915050565b60a08101818360005b60058110156138a25781518352602092830192909101906001016138b4565b60408101818360005b60028110156138a25781518352602092830192909101906001016138dc56fea2646970667358221220dbbd3b561132cb7f6a30b997ebebd816097496ea3201b393b1f7b348386eee8764736f6c634300080c0033",
}

// CommitteeABI is the input ABI used to generate the binding from.
// Deprecated: Use CommitteeMetaData.ABI instead.
var CommitteeABI = CommitteeMetaData.ABI

// CommitteeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommitteeMetaData.Bin instead.
var CommitteeBin = CommitteeMetaData.Bin

// DeployCommittee deploys a new Ethereum contract, binding an instance of Committee to it.
func DeployCommittee(auth *bind.TransactOpts, backend bind.ContractBackend, _service common.Address, _serviceManager common.Address, _strategyManager common.Address) (common.Address, *types.Transaction, *Committee, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitteeBin), backend, _service, _serviceManager, _strategyManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// Committee is an auto generated Go binding around an Ethereum contract.
type Committee struct {
	CommitteeCaller     // Read-only binding to the contract
	CommitteeTransactor // Write-only binding to the contract
	CommitteeFilterer   // Log filterer for contract events
}

// CommitteeCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommitteeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommitteeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommitteeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommitteeSession struct {
	Contract     *Committee        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommitteeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommitteeCallerSession struct {
	Contract *CommitteeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// CommitteeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommitteeTransactorSession struct {
	Contract     *CommitteeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// CommitteeRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommitteeRaw struct {
	Contract *Committee // Generic contract binding to access the raw methods on
}

// CommitteeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommitteeCallerRaw struct {
	Contract *CommitteeCaller // Generic read-only contract binding to access the raw methods on
}

// CommitteeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommitteeTransactorRaw struct {
	Contract *CommitteeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommittee creates a new instance of Committee, bound to a specific deployed contract.
func NewCommittee(address common.Address, backend bind.ContractBackend) (*Committee, error) {
	contract, err := bindCommittee(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// NewCommitteeCaller creates a new read-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeCaller(address common.Address, caller bind.ContractCaller) (*CommitteeCaller, error) {
	contract, err := bindCommittee(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeCaller{contract: contract}, nil
}

// NewCommitteeTransactor creates a new write-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitteeTransactor, error) {
	contract, err := bindCommittee(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeTransactor{contract: contract}, nil
}

// NewCommitteeFilterer creates a new log filterer instance of Committee, bound to a specific deployed contract.
func NewCommitteeFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitteeFilterer, error) {
	contract, err := bindCommittee(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitteeFilterer{contract: contract}, nil
}

// bindCommittee binds a generic wrapper to an already deployed contract.
func bindCommittee(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.CommitteeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transact(opts, method, params...)
}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) ACCOUNTCREATIONHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "ACCOUNT_CREATION_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) ACCOUNTCREATIONHASH() ([32]byte, error) {
	return _Committee.Contract.ACCOUNTCREATIONHASH(&_Committee.CallOpts)
}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) ACCOUNTCREATIONHASH() ([32]byte, error) {
	return _Committee.Contract.ACCOUNTCREATIONHASH(&_Committee.CallOpts)
}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeCaller) AUTHORISETYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "AUTHORISE_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeSession) AUTHORISETYPEHASH() ([32]byte, error) {
	return _Committee.Contract.AUTHORISETYPEHASH(&_Committee.CallOpts)
}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) AUTHORISETYPEHASH() ([32]byte, error) {
	return _Committee.Contract.AUTHORISETYPEHASH(&_Committee.CallOpts)
}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeCaller) COMMITTEECURRENT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "COMMITTEE_CURRENT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeSession) COMMITTEECURRENT() (*big.Int, error) {
	return _Committee.Contract.COMMITTEECURRENT(&_Committee.CallOpts)
}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeCallerSession) COMMITTEECURRENT() (*big.Int, error) {
	return _Committee.Contract.COMMITTEECURRENT(&_Committee.CallOpts)
}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeCaller) COMMITTEENEXT1(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "COMMITTEE_NEXT_1")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeSession) COMMITTEENEXT1() (*big.Int, error) {
	return _Committee.Contract.COMMITTEENEXT1(&_Committee.CallOpts)
}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeCallerSession) COMMITTEENEXT1() (*big.Int, error) {
	return _Committee.Contract.COMMITTEENEXT1(&_Committee.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Committee.Contract.DOMAINSEPARATOR(&_Committee.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Committee.Contract.DOMAINSEPARATOR(&_Committee.CallOpts)
}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) EIP712DOMAINHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "EIP712DOMAIN_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) EIP712DOMAINHASH() ([32]byte, error) {
	return _Committee.Contract.EIP712DOMAINHASH(&_Committee.CallOpts)
}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) EIP712DOMAINHASH() ([32]byte, error) {
	return _Committee.Contract.EIP712DOMAINHASH(&_Committee.CallOpts)
}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) HERMEZNETWORKHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "HERMEZ_NETWORK_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) HERMEZNETWORKHASH() ([32]byte, error) {
	return _Committee.Contract.HERMEZNETWORKHASH(&_Committee.CallOpts)
}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) HERMEZNETWORKHASH() ([32]byte, error) {
	return _Committee.Contract.HERMEZNETWORKHASH(&_Committee.CallOpts)
}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) NAMEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "NAME_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) NAMEHASH() ([32]byte, error) {
	return _Committee.Contract.NAMEHASH(&_Committee.CallOpts)
}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) NAMEHASH() ([32]byte, error) {
	return _Committee.Contract.NAMEHASH(&_Committee.CallOpts)
}

// NUMBEROFQUORUMS is a free data retrieval call binding the contract method 0xe21ade6d.
//
// Solidity: function NUMBER_OF_QUORUMS() view returns(uint256)
func (_Committee *CommitteeCaller) NUMBEROFQUORUMS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "NUMBER_OF_QUORUMS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NUMBEROFQUORUMS is a free data retrieval call binding the contract method 0xe21ade6d.
//
// Solidity: function NUMBER_OF_QUORUMS() view returns(uint256)
func (_Committee *CommitteeSession) NUMBEROFQUORUMS() (*big.Int, error) {
	return _Committee.Contract.NUMBEROFQUORUMS(&_Committee.CallOpts)
}

// NUMBEROFQUORUMS is a free data retrieval call binding the contract method 0xe21ade6d.
//
// Solidity: function NUMBER_OF_QUORUMS() view returns(uint256)
func (_Committee *CommitteeCallerSession) NUMBEROFQUORUMS() (*big.Int, error) {
	return _Committee.Contract.NUMBEROFQUORUMS(&_Committee.CallOpts)
}

// UPDATETYPEAMOUNTCHANGE is a free data retrieval call binding the contract method 0x23097e86.
//
// Solidity: function UPDATE_TYPE_AMOUNT_CHANGE() view returns(uint8)
func (_Committee *CommitteeCaller) UPDATETYPEAMOUNTCHANGE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "UPDATE_TYPE_AMOUNT_CHANGE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UPDATETYPEAMOUNTCHANGE is a free data retrieval call binding the contract method 0x23097e86.
//
// Solidity: function UPDATE_TYPE_AMOUNT_CHANGE() view returns(uint8)
func (_Committee *CommitteeSession) UPDATETYPEAMOUNTCHANGE() (uint8, error) {
	return _Committee.Contract.UPDATETYPEAMOUNTCHANGE(&_Committee.CallOpts)
}

// UPDATETYPEAMOUNTCHANGE is a free data retrieval call binding the contract method 0x23097e86.
//
// Solidity: function UPDATE_TYPE_AMOUNT_CHANGE() view returns(uint8)
func (_Committee *CommitteeCallerSession) UPDATETYPEAMOUNTCHANGE() (uint8, error) {
	return _Committee.Contract.UPDATETYPEAMOUNTCHANGE(&_Committee.CallOpts)
}

// UPDATETYPEREGISTER is a free data retrieval call binding the contract method 0xd742da1a.
//
// Solidity: function UPDATE_TYPE_REGISTER() view returns(uint8)
func (_Committee *CommitteeCaller) UPDATETYPEREGISTER(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "UPDATE_TYPE_REGISTER")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UPDATETYPEREGISTER is a free data retrieval call binding the contract method 0xd742da1a.
//
// Solidity: function UPDATE_TYPE_REGISTER() view returns(uint8)
func (_Committee *CommitteeSession) UPDATETYPEREGISTER() (uint8, error) {
	return _Committee.Contract.UPDATETYPEREGISTER(&_Committee.CallOpts)
}

// UPDATETYPEREGISTER is a free data retrieval call binding the contract method 0xd742da1a.
//
// Solidity: function UPDATE_TYPE_REGISTER() view returns(uint8)
func (_Committee *CommitteeCallerSession) UPDATETYPEREGISTER() (uint8, error) {
	return _Committee.Contract.UPDATETYPEREGISTER(&_Committee.CallOpts)
}

// UPDATETYPEUNREGISTER is a free data retrieval call binding the contract method 0x1d393c09.
//
// Solidity: function UPDATE_TYPE_UNREGISTER() view returns(uint8)
func (_Committee *CommitteeCaller) UPDATETYPEUNREGISTER(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "UPDATE_TYPE_UNREGISTER")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UPDATETYPEUNREGISTER is a free data retrieval call binding the contract method 0x1d393c09.
//
// Solidity: function UPDATE_TYPE_UNREGISTER() view returns(uint8)
func (_Committee *CommitteeSession) UPDATETYPEUNREGISTER() (uint8, error) {
	return _Committee.Contract.UPDATETYPEUNREGISTER(&_Committee.CallOpts)
}

// UPDATETYPEUNREGISTER is a free data retrieval call binding the contract method 0x1d393c09.
//
// Solidity: function UPDATE_TYPE_UNREGISTER() view returns(uint8)
func (_Committee *CommitteeCallerSession) UPDATETYPEUNREGISTER() (uint8, error) {
	return _Committee.Contract.UPDATETYPEUNREGISTER(&_Committee.CallOpts)
}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) VERSIONHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "VERSION_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) VERSIONHASH() ([32]byte, error) {
	return _Committee.Contract.VERSIONHASH(&_Committee.CallOpts)
}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) VERSIONHASH() ([32]byte, error) {
	return _Committee.Contract.VERSIONHASH(&_Committee.CallOpts)
}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeCaller) CommitteeAddrs(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeAddrs", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeSession) CommitteeAddrs(arg0 uint32, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.CommitteeAddrs(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeCallerSession) CommitteeAddrs(arg0 uint32, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.CommitteeAddrs(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeLeaves is a free data retrieval call binding the contract method 0x878d8667.
//
// Solidity: function committeeLeaves(uint32 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) CommitteeLeaves(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeLeaves", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitteeLeaves is a free data retrieval call binding the contract method 0x878d8667.
//
// Solidity: function committeeLeaves(uint32 , uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) CommitteeLeaves(arg0 uint32, arg1 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeLeaves(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeLeaves is a free data retrieval call binding the contract method 0x878d8667.
//
// Solidity: function committeeLeaves(uint32 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) CommitteeLeaves(arg0 uint32, arg1 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeLeaves(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeLeavesMap is a free data retrieval call binding the contract method 0xda16ce83.
//
// Solidity: function committeeLeavesMap(uint32 , address ) view returns(uint32)
func (_Committee *CommitteeCaller) CommitteeLeavesMap(opts *bind.CallOpts, arg0 uint32, arg1 common.Address) (uint32, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeLeavesMap", arg0, arg1)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CommitteeLeavesMap is a free data retrieval call binding the contract method 0xda16ce83.
//
// Solidity: function committeeLeavesMap(uint32 , address ) view returns(uint32)
func (_Committee *CommitteeSession) CommitteeLeavesMap(arg0 uint32, arg1 common.Address) (uint32, error) {
	return _Committee.Contract.CommitteeLeavesMap(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeLeavesMap is a free data retrieval call binding the contract method 0xda16ce83.
//
// Solidity: function committeeLeavesMap(uint32 , address ) view returns(uint32)
func (_Committee *CommitteeCallerSession) CommitteeLeavesMap(arg0 uint32, arg1 common.Address) (uint32, error) {
	return _Committee.Contract.CommitteeLeavesMap(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeCaller) CommitteeParams(opts *bind.CallOpts, arg0 uint32) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeParams", arg0)

	outstruct := new(struct {
		StartBlock     *big.Int
		Duration       *big.Int
		FreezeDuration *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.FreezeDuration = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeSession) CommitteeParams(arg0 uint32) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeCallerSession) CommitteeParams(arg0 uint32) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeCaller) Committees(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committees", arg0, arg1)

	outstruct := new(struct {
		Root             *big.Int
		Height           *big.Int
		TotalVotingPower *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Height = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalVotingPower = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeSession) Committees(arg0 uint32, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeCallerSession) Committees(arg0 uint32, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Committee *CommitteeCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Committee *CommitteeSession) Delegation() (common.Address, error) {
	return _Committee.Contract.Delegation(&_Committee.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_Committee *CommitteeCallerSession) Delegation() (common.Address, error) {
	return _Committee.Contract.Delegation(&_Committee.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeSession) GetChainId() (*big.Int, error) {
	return _Committee.Contract.GetChainId(&_Committee.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeCallerSession) GetChainId() (*big.Int, error) {
	return _Committee.Contract.GetChainId(&_Committee.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeCaller) GetCommittee(opts *bind.CallOpts, chainID uint32, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getCommittee", chainID, blockNumber)

	outstruct := new(struct {
		CurrentCommittee ILagrangeCommitteeCommitteeData
		NextRoot         *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CurrentCommittee = *abi.ConvertType(out[0], new(ILagrangeCommitteeCommitteeData)).(*ILagrangeCommitteeCommitteeData)
	outstruct.NextRoot = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeSession) GetCommittee(chainID uint32, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeCallerSession) GetCommittee(chainID uint32, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeCaller) GetEpochNumber(opts *bind.CallOpts, chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getEpochNumber", chainID, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeSession) GetEpochNumber(chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetEpochNumber(chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetLeafHash is a free data retrieval call binding the contract method 0x5b7b108c.
//
// Solidity: function getLeafHash(address opAddr) view returns(uint256)
func (_Committee *CommitteeCaller) GetLeafHash(opts *bind.CallOpts, opAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getLeafHash", opAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLeafHash is a free data retrieval call binding the contract method 0x5b7b108c.
//
// Solidity: function getLeafHash(address opAddr) view returns(uint256)
func (_Committee *CommitteeSession) GetLeafHash(opAddr common.Address) (*big.Int, error) {
	return _Committee.Contract.GetLeafHash(&_Committee.CallOpts, opAddr)
}

// GetLeafHash is a free data retrieval call binding the contract method 0x5b7b108c.
//
// Solidity: function getLeafHash(address opAddr) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetLeafHash(opAddr common.Address) (*big.Int, error) {
	return _Committee.Contract.GetLeafHash(&_Committee.CallOpts, opAddr)
}

// GetNext1CommitteeRoot is a free data retrieval call binding the contract method 0xbf7cfebb.
//
// Solidity: function getNext1CommitteeRoot(uint32 chainID) view returns(uint256)
func (_Committee *CommitteeCaller) GetNext1CommitteeRoot(opts *bind.CallOpts, chainID uint32) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getNext1CommitteeRoot", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNext1CommitteeRoot is a free data retrieval call binding the contract method 0xbf7cfebb.
//
// Solidity: function getNext1CommitteeRoot(uint32 chainID) view returns(uint256)
func (_Committee *CommitteeSession) GetNext1CommitteeRoot(chainID uint32) (*big.Int, error) {
	return _Committee.Contract.GetNext1CommitteeRoot(&_Committee.CallOpts, chainID)
}

// GetNext1CommitteeRoot is a free data retrieval call binding the contract method 0xbf7cfebb.
//
// Solidity: function getNext1CommitteeRoot(uint32 chainID) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetNext1CommitteeRoot(chainID uint32) (*big.Int, error) {
	return _Committee.Contract.GetNext1CommitteeRoot(&_Committee.CallOpts, chainID)
}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeCaller) GetServeUntilBlock(opts *bind.CallOpts, operator common.Address) (uint32, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getServeUntilBlock", operator)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeSession) GetServeUntilBlock(operator common.Address) (uint32, error) {
	return _Committee.Contract.GetServeUntilBlock(&_Committee.CallOpts, operator)
}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeCallerSession) GetServeUntilBlock(operator common.Address) (uint32, error) {
	return _Committee.Contract.GetServeUntilBlock(&_Committee.CallOpts, operator)
}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeCaller) GetSlashed(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getSlashed", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeSession) GetSlashed(operator common.Address) (bool, error) {
	return _Committee.Contract.GetSlashed(&_Committee.CallOpts, operator)
}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeCallerSession) GetSlashed(operator common.Address) (bool, error) {
	return _Committee.Contract.GetSlashed(&_Committee.CallOpts, operator)
}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeCaller) IsUpdatable(opts *bind.CallOpts, chainID uint32, epochNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isUpdatable", chainID, epochNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeSession) IsUpdatable(chainID uint32, epochNumber *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, chainID, epochNumber)
}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeCallerSession) IsUpdatable(chainID uint32, epochNumber *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, chainID, epochNumber)
}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, uint32 serveUntilBlock, uint32 chainID, bool slashed)
func (_Committee *CommitteeCaller) Operators(opts *bind.CallOpts, arg0 common.Address) (struct {
	Amount          *big.Int
	BlsPubKey       []byte
	ServeUntilBlock uint32
	ChainID         uint32
	Slashed         bool
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "operators", arg0)

	outstruct := new(struct {
		Amount          *big.Int
		BlsPubKey       []byte
		ServeUntilBlock uint32
		ChainID         uint32
		Slashed         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BlsPubKey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.ServeUntilBlock = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.ChainID = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.Slashed = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, uint32 serveUntilBlock, uint32 chainID, bool slashed)
func (_Committee *CommitteeSession) Operators(arg0 common.Address) (struct {
	Amount          *big.Int
	BlsPubKey       []byte
	ServeUntilBlock uint32
	ChainID         uint32
	Slashed         bool
}, error) {
	return _Committee.Contract.Operators(&_Committee.CallOpts, arg0)
}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, uint32 serveUntilBlock, uint32 chainID, bool slashed)
func (_Committee *CommitteeCallerSession) Operators(arg0 common.Address) (struct {
	Amount          *big.Int
	BlsPubKey       []byte
	ServeUntilBlock uint32
	ChainID         uint32
	Slashed         bool
}, error) {
	return _Committee.Contract.Operators(&_Committee.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCallerSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// QuorumBips is a free data retrieval call binding the contract method 0x28420dfa.
//
// Solidity: function quorumBips(uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) QuorumBips(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "quorumBips", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuorumBips is a free data retrieval call binding the contract method 0x28420dfa.
//
// Solidity: function quorumBips(uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) QuorumBips(arg0 *big.Int) (*big.Int, error) {
	return _Committee.Contract.QuorumBips(&_Committee.CallOpts, arg0)
}

// QuorumBips is a free data retrieval call binding the contract method 0x28420dfa.
//
// Solidity: function quorumBips(uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) QuorumBips(arg0 *big.Int) (*big.Int, error) {
	return _Committee.Contract.QuorumBips(&_Committee.CallOpts, arg0)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCaller) Service(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "service")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCallerSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_Committee *CommitteeCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_Committee *CommitteeSession) ServiceManager() (common.Address, error) {
	return _Committee.Contract.ServiceManager(&_Committee.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_Committee *CommitteeCallerSession) ServiceManager() (common.Address, error) {
	return _Committee.Contract.ServiceManager(&_Committee.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Committee *CommitteeCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Committee *CommitteeSession) Slasher() (common.Address, error) {
	return _Committee.Contract.Slasher(&_Committee.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_Committee *CommitteeCallerSession) Slasher() (common.Address, error) {
	return _Committee.Contract.Slasher(&_Committee.CallOpts)
}

// StrategiesConsideredAndMultipliers is a free data retrieval call binding the contract method 0x1ea1afe1.
//
// Solidity: function strategiesConsideredAndMultipliers(uint256 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_Committee *CommitteeCaller) StrategiesConsideredAndMultipliers(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "strategiesConsideredAndMultipliers", arg0, arg1)

	outstruct := new(struct {
		Strategy   common.Address
		Multiplier *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Strategy = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Multiplier = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StrategiesConsideredAndMultipliers is a free data retrieval call binding the contract method 0x1ea1afe1.
//
// Solidity: function strategiesConsideredAndMultipliers(uint256 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_Committee *CommitteeSession) StrategiesConsideredAndMultipliers(arg0 *big.Int, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _Committee.Contract.StrategiesConsideredAndMultipliers(&_Committee.CallOpts, arg0, arg1)
}

// StrategiesConsideredAndMultipliers is a free data retrieval call binding the contract method 0x1ea1afe1.
//
// Solidity: function strategiesConsideredAndMultipliers(uint256 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_Committee *CommitteeCallerSession) StrategiesConsideredAndMultipliers(arg0 *big.Int, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _Committee.Contract.StrategiesConsideredAndMultipliers(&_Committee.CallOpts, arg0, arg1)
}

// StrategiesConsideredAndMultipliersLength is a free data retrieval call binding the contract method 0x0191f72c.
//
// Solidity: function strategiesConsideredAndMultipliersLength(uint256 quorumNumber) view returns(uint256)
func (_Committee *CommitteeCaller) StrategiesConsideredAndMultipliersLength(opts *bind.CallOpts, quorumNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "strategiesConsideredAndMultipliersLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StrategiesConsideredAndMultipliersLength is a free data retrieval call binding the contract method 0x0191f72c.
//
// Solidity: function strategiesConsideredAndMultipliersLength(uint256 quorumNumber) view returns(uint256)
func (_Committee *CommitteeSession) StrategiesConsideredAndMultipliersLength(quorumNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.StrategiesConsideredAndMultipliersLength(&_Committee.CallOpts, quorumNumber)
}

// StrategiesConsideredAndMultipliersLength is a free data retrieval call binding the contract method 0x0191f72c.
//
// Solidity: function strategiesConsideredAndMultipliersLength(uint256 quorumNumber) view returns(uint256)
func (_Committee *CommitteeCallerSession) StrategiesConsideredAndMultipliersLength(quorumNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.StrategiesConsideredAndMultipliersLength(&_Committee.CallOpts, quorumNumber)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Committee *CommitteeCaller) StrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "strategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Committee *CommitteeSession) StrategyManager() (common.Address, error) {
	return _Committee.Contract.StrategyManager(&_Committee.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_Committee *CommitteeCallerSession) StrategyManager() (common.Address, error) {
	return _Committee.Contract.StrategyManager(&_Committee.CallOpts)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeCaller) UpdatedEpoch(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "updatedEpoch", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeSession) UpdatedEpoch(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) UpdatedEpoch(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// UpdatedOperators is a free data retrieval call binding the contract method 0xab4756fc.
//
// Solidity: function updatedOperators(uint32 , uint256 ) view returns(address operator, uint8 updateType)
func (_Committee *CommitteeCaller) UpdatedOperators(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (struct {
	Operator   common.Address
	UpdateType uint8
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "updatedOperators", arg0, arg1)

	outstruct := new(struct {
		Operator   common.Address
		UpdateType uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Operator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.UpdateType = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// UpdatedOperators is a free data retrieval call binding the contract method 0xab4756fc.
//
// Solidity: function updatedOperators(uint32 , uint256 ) view returns(address operator, uint8 updateType)
func (_Committee *CommitteeSession) UpdatedOperators(arg0 uint32, arg1 *big.Int) (struct {
	Operator   common.Address
	UpdateType uint8
}, error) {
	return _Committee.Contract.UpdatedOperators(&_Committee.CallOpts, arg0, arg1)
}

// UpdatedOperators is a free data retrieval call binding the contract method 0xab4756fc.
//
// Solidity: function updatedOperators(uint32 , uint256 ) view returns(address operator, uint8 updateType)
func (_Committee *CommitteeCallerSession) UpdatedOperators(arg0 uint32, arg1 *big.Int) (struct {
	Operator   common.Address
	UpdateType uint8
}, error) {
	return _Committee.Contract.UpdatedOperators(&_Committee.CallOpts, arg0, arg1)
}

// AddOperator is a paid mutator transaction binding the contract method 0x4e0cf846.
//
// Solidity: function addOperator(address operator, bytes blsPubKey, uint32 chainID, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeTransactor) AddOperator(opts *bind.TransactOpts, operator common.Address, blsPubKey []byte, chainID uint32, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "addOperator", operator, blsPubKey, chainID, serveUntilBlock)
}

// AddOperator is a paid mutator transaction binding the contract method 0x4e0cf846.
//
// Solidity: function addOperator(address operator, bytes blsPubKey, uint32 chainID, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeSession) AddOperator(operator common.Address, blsPubKey []byte, chainID uint32, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, blsPubKey, chainID, serveUntilBlock)
}

// AddOperator is a paid mutator transaction binding the contract method 0x4e0cf846.
//
// Solidity: function addOperator(address operator, bytes blsPubKey, uint32 chainID, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeTransactorSession) AddOperator(operator common.Address, blsPubKey []byte, chainID uint32, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, blsPubKey, chainID, serveUntilBlock)
}

// AddStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0x6bbc5310.
//
// Solidity: function addStrategiesConsideredAndMultipliers(uint256 quorumNumber, (address,uint96)[] _newStrategiesConsideredAndMultipliers) returns()
func (_Committee *CommitteeTransactor) AddStrategiesConsideredAndMultipliers(opts *bind.TransactOpts, quorumNumber *big.Int, _newStrategiesConsideredAndMultipliers []VoteWeigherBaseStorageStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "addStrategiesConsideredAndMultipliers", quorumNumber, _newStrategiesConsideredAndMultipliers)
}

// AddStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0x6bbc5310.
//
// Solidity: function addStrategiesConsideredAndMultipliers(uint256 quorumNumber, (address,uint96)[] _newStrategiesConsideredAndMultipliers) returns()
func (_Committee *CommitteeSession) AddStrategiesConsideredAndMultipliers(quorumNumber *big.Int, _newStrategiesConsideredAndMultipliers []VoteWeigherBaseStorageStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _Committee.Contract.AddStrategiesConsideredAndMultipliers(&_Committee.TransactOpts, quorumNumber, _newStrategiesConsideredAndMultipliers)
}

// AddStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0x6bbc5310.
//
// Solidity: function addStrategiesConsideredAndMultipliers(uint256 quorumNumber, (address,uint96)[] _newStrategiesConsideredAndMultipliers) returns()
func (_Committee *CommitteeTransactorSession) AddStrategiesConsideredAndMultipliers(quorumNumber *big.Int, _newStrategiesConsideredAndMultipliers []VoteWeigherBaseStorageStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _Committee.Contract.AddStrategiesConsideredAndMultipliers(&_Committee.TransactOpts, quorumNumber, _newStrategiesConsideredAndMultipliers)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "initialize", initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeSession) Initialize(initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeTransactorSession) Initialize(initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// ModifyStrategyWeights is a paid mutator transaction binding the contract method 0x10805578.
//
// Solidity: function modifyStrategyWeights(uint256 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_Committee *CommitteeTransactor) ModifyStrategyWeights(opts *bind.TransactOpts, quorumNumber *big.Int, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "modifyStrategyWeights", quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyWeights is a paid mutator transaction binding the contract method 0x10805578.
//
// Solidity: function modifyStrategyWeights(uint256 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_Committee *CommitteeSession) ModifyStrategyWeights(quorumNumber *big.Int, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.ModifyStrategyWeights(&_Committee.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyWeights is a paid mutator transaction binding the contract method 0x10805578.
//
// Solidity: function modifyStrategyWeights(uint256 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_Committee *CommitteeTransactorSession) ModifyStrategyWeights(quorumNumber *big.Int, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.ModifyStrategyWeights(&_Committee.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// RegisterChain is a paid mutator transaction binding the contract method 0x046684dc.
//
// Solidity: function registerChain(uint32 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeTransactor) RegisterChain(opts *bind.TransactOpts, chainID uint32, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "registerChain", chainID, epochPeriod, freezeDuration)
}

// RegisterChain is a paid mutator transaction binding the contract method 0x046684dc.
//
// Solidity: function registerChain(uint32 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeSession) RegisterChain(chainID uint32, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, epochPeriod, freezeDuration)
}

// RegisterChain is a paid mutator transaction binding the contract method 0x046684dc.
//
// Solidity: function registerChain(uint32 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeTransactorSession) RegisterChain(chainID uint32, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, epochPeriod, freezeDuration)
}

// RemoveStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0xa3c96ce5.
//
// Solidity: function removeStrategiesConsideredAndMultipliers(uint256 quorumNumber, address[] _strategiesToRemove, uint256[] indicesToRemove) returns()
func (_Committee *CommitteeTransactor) RemoveStrategiesConsideredAndMultipliers(opts *bind.TransactOpts, quorumNumber *big.Int, _strategiesToRemove []common.Address, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "removeStrategiesConsideredAndMultipliers", quorumNumber, _strategiesToRemove, indicesToRemove)
}

// RemoveStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0xa3c96ce5.
//
// Solidity: function removeStrategiesConsideredAndMultipliers(uint256 quorumNumber, address[] _strategiesToRemove, uint256[] indicesToRemove) returns()
func (_Committee *CommitteeSession) RemoveStrategiesConsideredAndMultipliers(quorumNumber *big.Int, _strategiesToRemove []common.Address, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RemoveStrategiesConsideredAndMultipliers(&_Committee.TransactOpts, quorumNumber, _strategiesToRemove, indicesToRemove)
}

// RemoveStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0xa3c96ce5.
//
// Solidity: function removeStrategiesConsideredAndMultipliers(uint256 quorumNumber, address[] _strategiesToRemove, uint256[] indicesToRemove) returns()
func (_Committee *CommitteeTransactorSession) RemoveStrategiesConsideredAndMultipliers(quorumNumber *big.Int, _strategiesToRemove []common.Address, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RemoveStrategiesConsideredAndMultipliers(&_Committee.TransactOpts, quorumNumber, _strategiesToRemove, indicesToRemove)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// SetSlashed is a paid mutator transaction binding the contract method 0xf74c54cc.
//
// Solidity: function setSlashed(address operator) returns()
func (_Committee *CommitteeTransactor) SetSlashed(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "setSlashed", operator)
}

// SetSlashed is a paid mutator transaction binding the contract method 0xf74c54cc.
//
// Solidity: function setSlashed(address operator) returns()
func (_Committee *CommitteeSession) SetSlashed(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.SetSlashed(&_Committee.TransactOpts, operator)
}

// SetSlashed is a paid mutator transaction binding the contract method 0xf74c54cc.
//
// Solidity: function setSlashed(address operator) returns()
func (_Committee *CommitteeTransactorSession) SetSlashed(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.SetSlashed(&_Committee.TransactOpts, operator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactor) Update(opts *bind.TransactOpts, chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "update", chainID, epochNumber)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeSession) Update(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID, epochNumber)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactorSession) Update(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID, epochNumber)
}

// UpdateOperator is a paid mutator transaction binding the contract method 0xa73db071.
//
// Solidity: function updateOperator((address,uint8) opUpdate) returns()
func (_Committee *CommitteeTransactor) UpdateOperator(opts *bind.TransactOpts, opUpdate OperatorUpdate) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "updateOperator", opUpdate)
}

// UpdateOperator is a paid mutator transaction binding the contract method 0xa73db071.
//
// Solidity: function updateOperator((address,uint8) opUpdate) returns()
func (_Committee *CommitteeSession) UpdateOperator(opUpdate OperatorUpdate) (*types.Transaction, error) {
	return _Committee.Contract.UpdateOperator(&_Committee.TransactOpts, opUpdate)
}

// UpdateOperator is a paid mutator transaction binding the contract method 0xa73db071.
//
// Solidity: function updateOperator((address,uint8) opUpdate) returns()
func (_Committee *CommitteeTransactorSession) UpdateOperator(opUpdate OperatorUpdate) (*types.Transaction, error) {
	return _Committee.Contract.UpdateOperator(&_Committee.TransactOpts, opUpdate)
}

// WeightOfOperator is a paid mutator transaction binding the contract method 0x891f28a5.
//
// Solidity: function weightOfOperator(address operator, uint256 quorumNumber) returns(uint96)
func (_Committee *CommitteeTransactor) WeightOfOperator(opts *bind.TransactOpts, operator common.Address, quorumNumber *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "weightOfOperator", operator, quorumNumber)
}

// WeightOfOperator is a paid mutator transaction binding the contract method 0x891f28a5.
//
// Solidity: function weightOfOperator(address operator, uint256 quorumNumber) returns(uint96)
func (_Committee *CommitteeSession) WeightOfOperator(operator common.Address, quorumNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.WeightOfOperator(&_Committee.TransactOpts, operator, quorumNumber)
}

// WeightOfOperator is a paid mutator transaction binding the contract method 0x891f28a5.
//
// Solidity: function weightOfOperator(address operator, uint256 quorumNumber) returns(uint96)
func (_Committee *CommitteeTransactorSession) WeightOfOperator(operator common.Address, quorumNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.WeightOfOperator(&_Committee.TransactOpts, operator, quorumNumber)
}

// CommitteeInitCommitteeIterator is returned from FilterInitCommittee and is used to iterate over the raw logs and unpacked data for InitCommittee events raised by the Committee contract.
type CommitteeInitCommitteeIterator struct {
	Event *CommitteeInitCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitCommittee represents a InitCommittee event raised by the Committee contract.
type CommitteeInitCommittee struct {
	ChainID        *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInitCommittee is a free log retrieval operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) FilterInitCommittee(opts *bind.FilterOpts) (*CommitteeInitCommitteeIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "InitCommittee")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitCommitteeIterator{contract: _Committee.contract, event: "InitCommittee", logs: logs, sub: sub}, nil
}

// WatchInitCommittee is a free log subscription operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) WatchInitCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeInitCommittee) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "InitCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitCommittee)
				if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitCommittee is a log parse operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) ParseInitCommittee(log types.Log) (*CommitteeInitCommittee, error) {
	event := new(CommitteeInitCommittee)
	if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Committee contract.
type CommitteeInitializedIterator struct {
	Event *CommitteeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitialized represents a Initialized event raised by the Committee contract.
type CommitteeInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) FilterInitialized(opts *bind.FilterOpts) (*CommitteeInitializedIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitializedIterator{contract: _Committee.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CommitteeInitialized) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitialized)
				if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) ParseInitialized(log types.Log) (*CommitteeInitialized, error) {
	event := new(CommitteeInitialized)
	if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Committee contract.
type CommitteeOwnershipTransferredIterator struct {
	Event *CommitteeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeOwnershipTransferred represents a OwnershipTransferred event raised by the Committee contract.
type CommitteeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CommitteeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeOwnershipTransferredIterator{contract: _Committee.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitteeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeOwnershipTransferred)
				if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) ParseOwnershipTransferred(log types.Log) (*CommitteeOwnershipTransferred, error) {
	event := new(CommitteeOwnershipTransferred)
	if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeStrategyAddedToQuorumIterator is returned from FilterStrategyAddedToQuorum and is used to iterate over the raw logs and unpacked data for StrategyAddedToQuorum events raised by the Committee contract.
type CommitteeStrategyAddedToQuorumIterator struct {
	Event *CommitteeStrategyAddedToQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeStrategyAddedToQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeStrategyAddedToQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeStrategyAddedToQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeStrategyAddedToQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeStrategyAddedToQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeStrategyAddedToQuorum represents a StrategyAddedToQuorum event raised by the Committee contract.
type CommitteeStrategyAddedToQuorum struct {
	QuorumNumber *big.Int
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyAddedToQuorum is a free log retrieval operation binding the contract event 0xa9d6f91aa411cbebcc7bd4c1f2685e2f4677353ebadfba370f19a365ea679d92.
//
// Solidity: event StrategyAddedToQuorum(uint256 indexed quorumNumber, address strategy)
func (_Committee *CommitteeFilterer) FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []*big.Int) (*CommitteeStrategyAddedToQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeStrategyAddedToQuorumIterator{contract: _Committee.contract, event: "StrategyAddedToQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyAddedToQuorum is a free log subscription operation binding the contract event 0xa9d6f91aa411cbebcc7bd4c1f2685e2f4677353ebadfba370f19a365ea679d92.
//
// Solidity: event StrategyAddedToQuorum(uint256 indexed quorumNumber, address strategy)
func (_Committee *CommitteeFilterer) WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *CommitteeStrategyAddedToQuorum, quorumNumber []*big.Int) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeStrategyAddedToQuorum)
				if err := _Committee.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyAddedToQuorum is a log parse operation binding the contract event 0xa9d6f91aa411cbebcc7bd4c1f2685e2f4677353ebadfba370f19a365ea679d92.
//
// Solidity: event StrategyAddedToQuorum(uint256 indexed quorumNumber, address strategy)
func (_Committee *CommitteeFilterer) ParseStrategyAddedToQuorum(log types.Log) (*CommitteeStrategyAddedToQuorum, error) {
	event := new(CommitteeStrategyAddedToQuorum)
	if err := _Committee.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeStrategyRemovedFromQuorumIterator is returned from FilterStrategyRemovedFromQuorum and is used to iterate over the raw logs and unpacked data for StrategyRemovedFromQuorum events raised by the Committee contract.
type CommitteeStrategyRemovedFromQuorumIterator struct {
	Event *CommitteeStrategyRemovedFromQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeStrategyRemovedFromQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeStrategyRemovedFromQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeStrategyRemovedFromQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeStrategyRemovedFromQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeStrategyRemovedFromQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeStrategyRemovedFromQuorum represents a StrategyRemovedFromQuorum event raised by the Committee contract.
type CommitteeStrategyRemovedFromQuorum struct {
	QuorumNumber *big.Int
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyRemovedFromQuorum is a free log retrieval operation binding the contract event 0x327495b508542e8eeed9261ee4edc99d913ed525014a835e67fe5c1669c7c8b4.
//
// Solidity: event StrategyRemovedFromQuorum(uint256 indexed quorumNumber, address strategy)
func (_Committee *CommitteeFilterer) FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []*big.Int) (*CommitteeStrategyRemovedFromQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeStrategyRemovedFromQuorumIterator{contract: _Committee.contract, event: "StrategyRemovedFromQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyRemovedFromQuorum is a free log subscription operation binding the contract event 0x327495b508542e8eeed9261ee4edc99d913ed525014a835e67fe5c1669c7c8b4.
//
// Solidity: event StrategyRemovedFromQuorum(uint256 indexed quorumNumber, address strategy)
func (_Committee *CommitteeFilterer) WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *CommitteeStrategyRemovedFromQuorum, quorumNumber []*big.Int) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeStrategyRemovedFromQuorum)
				if err := _Committee.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyRemovedFromQuorum is a log parse operation binding the contract event 0x327495b508542e8eeed9261ee4edc99d913ed525014a835e67fe5c1669c7c8b4.
//
// Solidity: event StrategyRemovedFromQuorum(uint256 indexed quorumNumber, address strategy)
func (_Committee *CommitteeFilterer) ParseStrategyRemovedFromQuorum(log types.Log) (*CommitteeStrategyRemovedFromQuorum, error) {
	event := new(CommitteeStrategyRemovedFromQuorum)
	if err := _Committee.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeUpdateCommitteeIterator is returned from FilterUpdateCommittee and is used to iterate over the raw logs and unpacked data for UpdateCommittee events raised by the Committee contract.
type CommitteeUpdateCommitteeIterator struct {
	Event *CommitteeUpdateCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeUpdateCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeUpdateCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeUpdateCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeUpdateCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeUpdateCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeUpdateCommittee represents a UpdateCommittee event raised by the Committee contract.
type CommitteeUpdateCommittee struct {
	ChainID *big.Int
	Current [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommittee is a free log retrieval operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) FilterUpdateCommittee(opts *bind.FilterOpts) (*CommitteeUpdateCommitteeIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "UpdateCommittee")
	if err != nil {
		return nil, err
	}
	return &CommitteeUpdateCommitteeIterator{contract: _Committee.contract, event: "UpdateCommittee", logs: logs, sub: sub}, nil
}

// WatchUpdateCommittee is a free log subscription operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) WatchUpdateCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeUpdateCommittee) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "UpdateCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeUpdateCommittee)
				if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommittee is a log parse operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) ParseUpdateCommittee(log types.Log) (*CommitteeUpdateCommittee, error) {
	event := new(CommitteeUpdateCommittee)
	if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
