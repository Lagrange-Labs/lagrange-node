// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package committee

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ILagrangeCommitteeCommitteeData is an auto generated low-level Go binding around an user-defined struct.
type ILagrangeCommitteeCommitteeData struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}

// ILagrangeCommitteeCommitteeLeaf is an auto generated low-level Go binding around an user-defined struct.
type ILagrangeCommitteeCommitteeLeaf struct {
	Addr      common.Address
	Stake     *big.Int
	BlsPubKey []byte
}

// CommitteeMetaData contains all meta data concerning the Committee contract.
var CommitteeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractILagrangeService\",\"name\":\"_service\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"name\":\"InitCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"current\",\"type\":\"bytes32\"}],\"name\":\"UpdateCommittee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNT_CREATION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORISE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMITTEE_CURRENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMITTEE_NEXT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CommitteeLeaves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CommitteeMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CommitteeMapKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CommitteeMapLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CommitteeParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Committees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERMEZ_NETWORK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addedAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"internalType\":\"structILagrangeCommittee.CommitteeData\",\"name\":\"currentCommittee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nextRoot\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"}],\"internalType\":\"structILagrangeCommittee.CommitteeLeaf\",\"name\":\"cleaf\",\"type\":\"tuple\"}],\"name\":\"getLeafHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"}],\"internalType\":\"structILagrangeCommittee.CommitteeLeaf\",\"name\":\"leaf\",\"type\":\"tuple\"}],\"name\":\"getLeafSlices\",\"outputs\":[{\"internalType\":\"uint96[11]\",\"name\":\"slices\",\"type\":\"uint96[11]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getNext1CommitteeRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getServeUntilBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getSlashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon1Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon2Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon3Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon4Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon5Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon6Elements\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"isUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"slashed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"removedAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contractILagrangeService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"slashed\",\"type\":\"bool\"}],\"name\":\"setSlashed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updatedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b5060405162002a3038038062002a30833981016040819052620000349162000114565b6001600160a01b0381166080526200004b62000052565b5062000146565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000112576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012757600080fd5b81516001600160a01b03811681146200013f57600080fd5b9392505050565b6080516128c0620001706000396000818161069201528181610b4e015261122301526128c06000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806382ab890a11610130578063c473af33116100b8578063e62f6b921161007c578063e62f6b92146106b4578063f1f2fcab1461022c578063f2fde38b146106db578063f39ead65146106ee578063f5425bd51461070e57600080fd5b8063c473af3314610606578063cd174cde1461062d578063cf7aa21114610640578063d4b96c441461067a578063d598d4c91461068d57600080fd5b8063adacd992116100ff578063adacd9921461059a578063b40cfbe4146105ad578063c0050642146105c0578063c2b84126146105d3578063c364091e146105f357600080fd5b806382ab890a1461052d5780638da5cb5b146105405780639743c7b7146105515780639e4e73181461057357600080fd5b80633644e515116101b357806353701cf41161018257806353701cf4146104bd57806355c1c2bc146104f75780636241171f1461050a578063715018a61461051d5780637d99c8641461052557600080fd5b80633644e515146103735780633d22485b1461041c57806344a5c4bf1461042f57806344f5b6b41461047657600080fd5b80631fb63e4d116101fa5780631fb63e4d146102d0578063244cef9c1461031a5780632b846504146103455780633408e47014610358578063358764761461035e57600080fd5b806304622c2e1461022c5780631300aff01461026657806313e7c9d81461028d5780631492d9af146102b0575b600080fd5b6102537fbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad81565b6040519081526020015b60405180910390f35b6102537fff946cf82975b1a2b6e6d28c9a76a4b8d7a1fd0592b785cb92771933310f9ee781565b6102a061029b366004612282565b610716565b60405161025d94939291906122ea565b6102536102be366004612321565b60746020526000908152604090205481565b6102ff6102de366004612321565b606d6020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161025d565b61032d61032836600461233a565b6107d5565b6040516001600160a01b03909116815260200161025d565b61025361035336600461233a565b61080d565b46610253565b61037161036c36600461235c565b61083e565b005b61025360007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7fbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61032d61042a36600461233a565b6109be565b61046161043d366004612282565b6001600160a01b031660009081526073602052604090206002015463ffffffff1690565b60405163ffffffff909116815260200161025d565b6104ad610484366004612282565b6001600160a01b0316600090815260736020526040902060020154640100000000900460ff1690565b604051901515815260200161025d565b6102ff6104cb36600461233a565b606e60209081526000928352604080842090915290825290208054600182015460029092015490919083565b610253610505366004612485565b6109da565b610371610518366004612523565b610b43565b610371610bf4565b610253600181565b61037161053b366004612321565b610c08565b6033546001600160a01b031661032d565b61056461055f36600461233a565b610ce4565b60405161025d93929190612568565b6102537fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6102536105a8366004612321565b610da4565b6103716105bb36600461258f565b61116e565b6104ad6105ce36600461233a565b611191565b6102536105e1366004612321565b606f6020526000908152604090205481565b61025361060136600461233a565b6111d9565b6102537f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61037161063b3660046125bb565b611218565b61065361064e36600461233a565b611325565b6040805183518152602080850151908201529281015190830152606082015260800161025d565b61025361068836600461233a565b6113b8565b61032d7f000000000000000000000000000000000000000000000000000000000000000081565b6102537fafd642c6a37a2e6887dc4ad5142f84197828a904e53d3204ecb1100329231eaa81565b6103716106e9366004612282565b6113d4565b6107016106fc366004612485565b61144d565b60405161025d919061263a565b610253600081565b6073602052600090815260409020805460018201805491929161073890612675565b80601f016020809104026020016040519081016040528092919081815260200182805461076490612675565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b5050506002909301549192505063ffffffff81169060ff6401000000009091041684565b606c60205281600052604060002081815481106107f157600080fd5b6000918252602090912001546001600160a01b03169150829050565b6072602052816000526040600020818154811061082957600080fd5b90600052602060002001600091509150505481565b600054610100900460ff161580801561085e5750600054600160ff909116105b806108785750303b158015610878575060005460ff166001145b6108e05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610903576000805461ff0019166101001790555b606580546001600160a01b03199081166001600160a01b03808b1691909117909255606680548216838a16179055606780548216838916179055606880548216838816179055606980548216838716179055606a805490911691841691909117905561096e886116b1565b80156109b4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b606b60205281600052604060002081815481106107f157600080fd5b6000806109e68361144d565b604080516101008101825282516001600160601b039081168284019081526020850151821660608085019190915293850151821660808085019190915293850151821660a0840152928401511660c0820152919250610b3c91908190610a629060e0830186600560200201516001600160601b03169052611703565b8152602001610b356040518060a00160405280866006600b8110610a8857610a886126b0565b60200201516001600160601b03168152602001866007600b8110610aae57610aae6126b0565b60200201516001600160601b03168152602001866008600b8110610ad457610ad46126b0565b60200201516001600160601b03168152602001866009600b8110610afa57610afa6126b0565b60200201516001600160601b0316815260200186600a600b8110610b2057610b206126b0565b60200201516001600160601b03169052611775565b90526117a6565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b8b5760405162461bcd60e51b81526004016108d7906126c6565b6001600160a01b03909216600081815260736020908152604080832060020180549615156401000000000264ff000000001990971696909617909555928152606c83529283208054600181018255908452919092200180546001600160a01b0319169091179055565b610bfc6117d7565b610c0660006116b1565b565b6000610c1482436111d9565b9050610c208183611191565b610c865760405162461bcd60e51b815260206004820152603160248201527f426c6f636b206e756d626572206973207072696f7220746f20636f6d6d69747460448201527032b290333932b2bd32903bb4b73237bb9760791b60648201526084016108d7565b6000828152607460205260409020548111610cd65760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c903ab83230ba32b21760811b60448201526064016108d7565b610ce08282611831565b5050565b60716020908152600092835260408084209091529082529020805460018201546002830180546001600160a01b03909316939192610d2190612675565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4d90612675565b8015610d9a5780601f10610d6f57610100808354040283529160200191610d9a565b820191906000526020600020905b815481529060010190602001808311610d7d57829003601f168201915b5050505050905083565b600081815260726020526040812054610ddc57610dd660405180604001604052806000815260200160008152506117a6565b92915050565b60008281526072602052604090205460011415610e245760008281526072602052604081208054909190610e1257610e126126b0565b90600052602060002001549050919050565b6000828152607260205260409020546002906001905b80831015610e5f57610e4d600284612720565b9250610e588261273f565b9150610e3a565b6000610e6c83600161275a565b67ffffffffffffffff811115610e8457610e846123e2565b604051908082528060200260200182016040528015610ead578160200160208202803683370190505b50905060008060015b84811015610fd157600089815260726020526040812080549193509082908110610ee257610ee26126b0565b90600052602060002001549250607260008a8152602001908152602001600020600182610f0f9190612772565b81548110610f1f57610f1f6126b0565b906000526020600020015484600081518110610f3d57610f3d6126b0565b6020026020010181815250505b600181831c81161415610fa157610f8d6040518060400160405280868581518110610f7757610f776126b0565b60200260200101518152602001858152506117a6565b925081610f998161273f565b925050610f4a565b82848381518110610fb457610fb46126b0565b6020908102919091010152610fca60028261275a565b9050610eb6565b848114156110a2576000898152607260205260409020610ff2600183612772565b81548110611002576110026126b0565b906000526020600020015484600081518110611020576110206126b0565b60200260200101818152505060009150600092505b600181831c81161415611076576110626040518060400160405280868581518110610f7757610f776126b0565b92508161106e8161273f565b925050611035565b82848381518110611089576110896126b0565b602090810291909101015261109f60028261275a565b90505b6000846000815181106110b7576110b76126b0565b6020026020010181815250505b868110156111465760009150600092505b600181831c81161415611116576111026040518060400160405280868581518110610f7757610f776126b0565b92508161110e8161273f565b9250506110d5565b82848381518110611129576111296126b0565b602090810291909101015261113f60028261275a565b90506110c4565b838681518110611158576111586126b0565b6020026020010151975050505050505050919050565b6111766117d7565b611181838383611aac565b61118c836000611831565b505050565b6000818152606d602052604081206001015481906111af908561275a565b6000848152606d60205260409020600201549091506111ce8183612772565b431195945050505050565b6000828152606d602052604081208054600190910154806111fa8386612772565b6112049190612789565b61120f90600161275a565b95945050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112605760405162461bcd60e51b81526004016108d7906126c6565b6000848152606b602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b038b16908117909155825160808101845287815280850189815263ffffffff88168286015260608201879052918652607385529290942082518155935180519294936112e693928501929101906120db565b5060408201516002909101805460609093015115156401000000000264ffffffffff1990931663ffffffff909216919091179190911790555050505050565b61134960405180606001604052806000815260200160008152602001600081525090565b60008061135685856111d9565b905060006113698661060187600161275a565b6000968752606e60209081526040808920948952848252808920815160608101835281548152600182015481850152600290910154818301529289529390529190952054909590945092505050565b6070602052816000526040600020818154811061082957600080fd5b6113dc6117d7565b6001600160a01b0381166114415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108d7565b61144a816116b1565b50565b61145561215f565b60005b600881101561154b5760408051600c80825281830190925260009160208201818036833701905050905060005b600c8110156114ff5760408501518161149f85600c612720565b6114a9919061275a565b815181106114b9576114b96126b0565b602001015160f81c60f81b8282815181106114d6576114d66126b0565b60200101906001600160f81b031916908160001a905350806114f78161273f565b915050611485565b50600061150b826127ab565b90508060a01c8484600b8110611523576115236126b0565b6001600160601b039092166020929092020152508190506115438161273f565b915050611458565b5060008260000151836020015160405160200161159c92919060609290921b6bffffffffffffffffffffffff1916825260801b6fffffffffffffffffffffffffffffffff1916601482015260240190565b604051602081830303815290604052905060005b60038110156116aa5760408051600c80825281830190925260009160208201818036833701905050905060005b600c8110156116535783816115f385600c612720565b6115fd919061275a565b8151811061160d5761160d6126b0565b602001015160f81c60f81b82828151811061162a5761162a6126b0565b60200101906001600160f81b031916908160001a9053508061164b8161273f565b9150506115dd565b50600061165f826127ab565b905060a081901c8561167285600861275a565b600b8110611682576116826126b0565b6001600160601b039092166020929092020152508190506116a28161273f565b9150506115b0565b5050919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606a54604051631eb694f160e31b81526000916001600160a01b03169063f5b4a788906117349085906004016127e2565b602060405180830381865afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd6919061280a565b606954604051630926f44b60e31b81526000916001600160a01b031690634937a25890611734908590600401612823565b6066546040516314d2f97b60e11b81526000916001600160a01b0316906329a5f2f69061173490859060040161284b565b6033546001600160a01b03163314610c065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108d7565b60005b6000838152606b602052604090205481101561198f576000838152606b6020526040812080548390811061186a5761186a6126b0565b60009182526020808320909101546001600160a01b0316808352607382526040808420815160808101909252805482526001810180549396509193909290840191906118b590612675565b80601f01602080910402602001604051908101604052809291908181526020018280546118e190612675565b801561192e5780601f106119035761010080835404028352916020019161192e565b820191906000526020600020905b81548152906001019060200180831161191157829003601f168201915b50505091835250506002919091015463ffffffff811660208084019190915264010000000090910460ff16151560409092019190915281519082015191925061197a9187918591611c37565b505080806119879061273f565b915050611834565b5060005b6000838152606c60205260409020548110156119fb576000838152606c6020526040902080546119e9918591849081106119cf576119cf6126b0565b6000918252602090912001546001600160a01b0316611dab565b806119f38161273f565b915050611993565b50611a068282611fda565b6000828152607460209081526040808320849055606b9091528120611a2a9161217e565b6000828152606c60205260408120611a419161217e565b6000828152606e602052604081207fc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd90891849190611a7f60018661275a565b81526020808201929092526040908101600020548151938452918301919091520160405180910390a15050565b6000838152606d602052604090205415611b185760405162461bcd60e51b815260206004820152602760248201527f436f6d6d69747465652068617320616c7265616479206265656e20696e69746960448201526630b634bd32b21760c91b60648201526084016108d7565b604080516060808201835243825260208083018681528385018681526000898152606d84528681209551865591516001808701919091559051600295860155855193840186528184528383018281528487018381528a8452606e855287842084805285528784209551865590519185019190915551929093019190915582518281528082018085528784526070909252929091209151611bb992919061219c565b506000838152606f602090815260408083208390558051838152808301808352878552607290935292209151611bf092919061219c565b5060408051848152602081018490529081018290527fd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc49060600160405180910390a1505050565b6000848152606d6020526040902054611cb85760405162461bcd60e51b815260206004820152603760248201527f4120636f6d6d697474656520666f72207468697320636861696e20494420686160448201527f73206e6f74206265656e20696e697469616c697a65642e00000000000000000060648201526084016108d7565b604080516060810182526001600160a01b0385168152602081018490529081018290526000611ce6826109da565b6000878152607160209081526040808320848452825291829020855181546001600160a01b0319166001600160a01b039091161781558582015160018201559185015180519394508593611d4092600285019201906120db565b5050506000868152607060209081526040808320805460018101825590845282842001849055888352606f9091528120805491611d7c8361273f565b909155505060009586526072602090815260408720805460018101825590885296209095019490945550505050565b60005b60008381526070602052604090205481101561118c576000838152607060205260408120805483908110611de457611de46126b0565b6000918252602080832090910154868352607090915260408220805491935090611e1090600190612772565b81548110611e2057611e206126b0565b60009182526020808320909101548783526071825260408084208685529092529120549091506001600160a01b039081169085161415611fc55760008581526071602090815260408083208484529091528082208483529120815481546001600160a01b0319166001600160a01b03909116178155600180830154908201556002808301805491830191611eb390612675565b611ebe9291906121d6565b50506040805160608101825260008082526020808301828152845180830186528381528486019081528b845260718352858420888552835294909220835181546001600160a01b0319166001600160a01b0390911617815591516001830155925180519294509092611f38926002850192909101906120db565b50505060008581526070602052604090208054611f5790600190612772565b81548110611f6757611f676126b0565b9060005260206000200154607060008781526020019081526020016000208481548110611f9657611f966126b0565b6000918252602080832090910192909255868152606f90915260408120805491611fbf83612873565b91905055505b50508080611fd29061273f565b915050611dae565b6000611fe583610da4565b90506000611ff460018461275a565b6000858152606f6020908152604080832054606e83528184208585529092529091206001810191909155839055905061202c84612050565b6000948552606e602090815260408087209387529290529320600201929092555050565b600080805b6000848152606f60205260409020548110156120d457600084815260716020908152604080832060709092528220805491929184908110612098576120986126b0565b9060005260206000200154815260200190815260200160002060010154826120c0919061275a565b9150806120cc8161273f565b915050612055565b5092915050565b8280546120e790612675565b90600052602060002090601f016020900481019282612109576000855561214f565b82601f1061212257805160ff191683800117855561214f565b8280016001018555821561214f579182015b8281111561214f578251825591602001919060010190612134565b5061215b929150612251565b5090565b604051806101600160405280600b906020820280368337509192915050565b508054600082559060005260206000209081019061144a9190612251565b82805482825590600052602060002090810192821561214f579160200282018281111561214f578251825591602001919060010190612134565b8280546121e290612675565b90600052602060002090601f016020900481019282612204576000855561214f565b82601f10612215578054855561214f565b8280016001018555821561214f57600052602060002091601f016020900482015b8281111561214f578254825591600101919060010190612236565b5b8082111561215b5760008155600101612252565b80356001600160a01b038116811461227d57600080fd5b919050565b60006020828403121561229457600080fd5b610b3c82612266565b6000815180845260005b818110156122c3576020818501810151868301820152016122a7565b818111156122d5576000602083870101525b50601f01601f19169290920160200192915050565b848152608060208201526000612303608083018661229d565b63ffffffff9490941660408301525090151560609091015292915050565b60006020828403121561233357600080fd5b5035919050565b6000806040838503121561234d57600080fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561237757600080fd5b61238088612266565b965061238e60208901612266565b955061239c60408901612266565b94506123aa60608901612266565b93506123b860808901612266565b92506123c660a08901612266565b91506123d460c08901612266565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261240957600080fd5b813567ffffffffffffffff80821115612424576124246123e2565b604051601f8301601f19908116603f0116810190828211818310171561244c5761244c6123e2565b8160405283815286602085880101111561246557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561249757600080fd5b813567ffffffffffffffff808211156124af57600080fd5b90830190606082860312156124c357600080fd5b6040516060810181811083821117156124de576124de6123e2565b6040526124ea83612266565b81526020830135602082015260408301358281111561250857600080fd5b612514878286016123f8565b60408301525095945050505050565b60008060006060848603121561253857600080fd5b61254184612266565b9250602084013591506040840135801515811461255d57600080fd5b809150509250925092565b60018060a01b038416815282602082015260606040820152600061120f606083018461229d565b6000806000606084860312156125a457600080fd5b505081359360208301359350604090920135919050565b600080600080600060a086880312156125d357600080fd5b6125dc86612266565b945060208601359350604086013567ffffffffffffffff8111156125ff57600080fd5b61260b888289016123f8565b93505060608601359150608086013563ffffffff8116811461262c57600080fd5b809150509295509295909350565b6101608101818360005b600b81101561266c5781516001600160601b0316835260209283019290910190600101612644565b50505092915050565b600181811c9082168061268957607f821691505b602082108114156126aa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60208082526024908201527f4f6e6c7920736572766963652063616e2063616c6c20746869732066756e637460408201526334b7b71760e11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561273a5761273a61270a565b500290565b60006000198214156127535761275361270a565b5060010190565b6000821982111561276d5761276d61270a565b500190565b6000828210156127845761278461270a565b500390565b6000826127a657634e487b7160e01b600052601260045260246000fd5b500490565b805160208201516001600160a01b0319808216929190600c8310156127da57808184600c0360031b1b83161693505b505050919050565b60c08101818360005b600681101561266c5781518352602092830192909101906001016127eb565b60006020828403121561281c57600080fd5b5051919050565b60a08101818360005b600581101561266c57815183526020928301929091019060010161282c565b60408101818360005b600281101561266c578151835260209283019290910190600101612854565b6000816128825761288261270a565b50600019019056fea2646970667358221220a60cd3df7754a988877460e364cce95b6be39f8ea86247a4adb879ac8b59d66764736f6c634300080c0033",
}

// CommitteeABI is the input ABI used to generate the binding from.
// Deprecated: Use CommitteeMetaData.ABI instead.
var CommitteeABI = CommitteeMetaData.ABI

// CommitteeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommitteeMetaData.Bin instead.
var CommitteeBin = CommitteeMetaData.Bin

// DeployCommittee deploys a new Ethereum contract, binding an instance of Committee to it.
func DeployCommittee(auth *bind.TransactOpts, backend bind.ContractBackend, _service common.Address) (common.Address, *types.Transaction, *Committee, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitteeBin), backend, _service)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// Committee is an auto generated Go binding around an Ethereum contract.
type Committee struct {
	CommitteeCaller     // Read-only binding to the contract
	CommitteeTransactor // Write-only binding to the contract
	CommitteeFilterer   // Log filterer for contract events
}

// CommitteeCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommitteeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommitteeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommitteeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommitteeSession struct {
	Contract     *Committee        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommitteeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommitteeCallerSession struct {
	Contract *CommitteeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// CommitteeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommitteeTransactorSession struct {
	Contract     *CommitteeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// CommitteeRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommitteeRaw struct {
	Contract *Committee // Generic contract binding to access the raw methods on
}

// CommitteeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommitteeCallerRaw struct {
	Contract *CommitteeCaller // Generic read-only contract binding to access the raw methods on
}

// CommitteeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommitteeTransactorRaw struct {
	Contract *CommitteeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommittee creates a new instance of Committee, bound to a specific deployed contract.
func NewCommittee(address common.Address, backend bind.ContractBackend) (*Committee, error) {
	contract, err := bindCommittee(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// NewCommitteeCaller creates a new read-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeCaller(address common.Address, caller bind.ContractCaller) (*CommitteeCaller, error) {
	contract, err := bindCommittee(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeCaller{contract: contract}, nil
}

// NewCommitteeTransactor creates a new write-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitteeTransactor, error) {
	contract, err := bindCommittee(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeTransactor{contract: contract}, nil
}

// NewCommitteeFilterer creates a new log filterer instance of Committee, bound to a specific deployed contract.
func NewCommitteeFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitteeFilterer, error) {
	contract, err := bindCommittee(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitteeFilterer{contract: contract}, nil
}

// bindCommittee binds a generic wrapper to an already deployed contract.
func bindCommittee(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.CommitteeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transact(opts, method, params...)
}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) ACCOUNTCREATIONHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "ACCOUNT_CREATION_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) ACCOUNTCREATIONHASH() ([32]byte, error) {
	return _Committee.Contract.ACCOUNTCREATIONHASH(&_Committee.CallOpts)
}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) ACCOUNTCREATIONHASH() ([32]byte, error) {
	return _Committee.Contract.ACCOUNTCREATIONHASH(&_Committee.CallOpts)
}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeCaller) AUTHORISETYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "AUTHORISE_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeSession) AUTHORISETYPEHASH() ([32]byte, error) {
	return _Committee.Contract.AUTHORISETYPEHASH(&_Committee.CallOpts)
}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) AUTHORISETYPEHASH() ([32]byte, error) {
	return _Committee.Contract.AUTHORISETYPEHASH(&_Committee.CallOpts)
}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeCaller) COMMITTEECURRENT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "COMMITTEE_CURRENT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeSession) COMMITTEECURRENT() (*big.Int, error) {
	return _Committee.Contract.COMMITTEECURRENT(&_Committee.CallOpts)
}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeCallerSession) COMMITTEECURRENT() (*big.Int, error) {
	return _Committee.Contract.COMMITTEECURRENT(&_Committee.CallOpts)
}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeCaller) COMMITTEENEXT1(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "COMMITTEE_NEXT_1")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeSession) COMMITTEENEXT1() (*big.Int, error) {
	return _Committee.Contract.COMMITTEENEXT1(&_Committee.CallOpts)
}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeCallerSession) COMMITTEENEXT1() (*big.Int, error) {
	return _Committee.Contract.COMMITTEENEXT1(&_Committee.CallOpts)
}

// CommitteeLeaves is a free data retrieval call binding the contract method 0x2b846504.
//
// Solidity: function CommitteeLeaves(uint256 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) CommitteeLeaves(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "CommitteeLeaves", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitteeLeaves is a free data retrieval call binding the contract method 0x2b846504.
//
// Solidity: function CommitteeLeaves(uint256 , uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) CommitteeLeaves(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeLeaves(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeLeaves is a free data retrieval call binding the contract method 0x2b846504.
//
// Solidity: function CommitteeLeaves(uint256 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) CommitteeLeaves(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeLeaves(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeMap is a free data retrieval call binding the contract method 0x9743c7b7.
//
// Solidity: function CommitteeMap(uint256 , uint256 ) view returns(address addr, uint256 stake, bytes blsPubKey)
func (_Committee *CommitteeCaller) CommitteeMap(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	Addr      common.Address
	Stake     *big.Int
	BlsPubKey []byte
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "CommitteeMap", arg0, arg1)

	outstruct := new(struct {
		Addr      common.Address
		Stake     *big.Int
		BlsPubKey []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Stake = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.BlsPubKey = *abi.ConvertType(out[2], new([]byte)).(*[]byte)

	return *outstruct, err

}

// CommitteeMap is a free data retrieval call binding the contract method 0x9743c7b7.
//
// Solidity: function CommitteeMap(uint256 , uint256 ) view returns(address addr, uint256 stake, bytes blsPubKey)
func (_Committee *CommitteeSession) CommitteeMap(arg0 *big.Int, arg1 *big.Int) (struct {
	Addr      common.Address
	Stake     *big.Int
	BlsPubKey []byte
}, error) {
	return _Committee.Contract.CommitteeMap(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeMap is a free data retrieval call binding the contract method 0x9743c7b7.
//
// Solidity: function CommitteeMap(uint256 , uint256 ) view returns(address addr, uint256 stake, bytes blsPubKey)
func (_Committee *CommitteeCallerSession) CommitteeMap(arg0 *big.Int, arg1 *big.Int) (struct {
	Addr      common.Address
	Stake     *big.Int
	BlsPubKey []byte
}, error) {
	return _Committee.Contract.CommitteeMap(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeMapKeys is a free data retrieval call binding the contract method 0xd4b96c44.
//
// Solidity: function CommitteeMapKeys(uint256 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) CommitteeMapKeys(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "CommitteeMapKeys", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitteeMapKeys is a free data retrieval call binding the contract method 0xd4b96c44.
//
// Solidity: function CommitteeMapKeys(uint256 , uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) CommitteeMapKeys(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeMapKeys(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeMapKeys is a free data retrieval call binding the contract method 0xd4b96c44.
//
// Solidity: function CommitteeMapKeys(uint256 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) CommitteeMapKeys(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeMapKeys(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeMapLength is a free data retrieval call binding the contract method 0xc2b84126.
//
// Solidity: function CommitteeMapLength(uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) CommitteeMapLength(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "CommitteeMapLength", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitteeMapLength is a free data retrieval call binding the contract method 0xc2b84126.
//
// Solidity: function CommitteeMapLength(uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) CommitteeMapLength(arg0 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeMapLength(&_Committee.CallOpts, arg0)
}

// CommitteeMapLength is a free data retrieval call binding the contract method 0xc2b84126.
//
// Solidity: function CommitteeMapLength(uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) CommitteeMapLength(arg0 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeMapLength(&_Committee.CallOpts, arg0)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x1fb63e4d.
//
// Solidity: function CommitteeParams(uint256 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeCaller) CommitteeParams(opts *bind.CallOpts, arg0 *big.Int) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "CommitteeParams", arg0)

	outstruct := new(struct {
		StartBlock     *big.Int
		Duration       *big.Int
		FreezeDuration *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.FreezeDuration = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CommitteeParams is a free data retrieval call binding the contract method 0x1fb63e4d.
//
// Solidity: function CommitteeParams(uint256 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeSession) CommitteeParams(arg0 *big.Int) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x1fb63e4d.
//
// Solidity: function CommitteeParams(uint256 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeCallerSession) CommitteeParams(arg0 *big.Int) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// Committees is a free data retrieval call binding the contract method 0x53701cf4.
//
// Solidity: function Committees(uint256 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeCaller) Committees(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "Committees", arg0, arg1)

	outstruct := new(struct {
		Root             *big.Int
		Height           *big.Int
		TotalVotingPower *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Height = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalVotingPower = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Committees is a free data retrieval call binding the contract method 0x53701cf4.
//
// Solidity: function Committees(uint256 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeSession) Committees(arg0 *big.Int, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// Committees is a free data retrieval call binding the contract method 0x53701cf4.
//
// Solidity: function Committees(uint256 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeCallerSession) Committees(arg0 *big.Int, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Committee.Contract.DOMAINSEPARATOR(&_Committee.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Committee.Contract.DOMAINSEPARATOR(&_Committee.CallOpts)
}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) EIP712DOMAINHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "EIP712DOMAIN_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) EIP712DOMAINHASH() ([32]byte, error) {
	return _Committee.Contract.EIP712DOMAINHASH(&_Committee.CallOpts)
}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) EIP712DOMAINHASH() ([32]byte, error) {
	return _Committee.Contract.EIP712DOMAINHASH(&_Committee.CallOpts)
}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) HERMEZNETWORKHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "HERMEZ_NETWORK_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) HERMEZNETWORKHASH() ([32]byte, error) {
	return _Committee.Contract.HERMEZNETWORKHASH(&_Committee.CallOpts)
}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) HERMEZNETWORKHASH() ([32]byte, error) {
	return _Committee.Contract.HERMEZNETWORKHASH(&_Committee.CallOpts)
}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) NAMEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "NAME_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) NAMEHASH() ([32]byte, error) {
	return _Committee.Contract.NAMEHASH(&_Committee.CallOpts)
}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) NAMEHASH() ([32]byte, error) {
	return _Committee.Contract.NAMEHASH(&_Committee.CallOpts)
}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) VERSIONHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "VERSION_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) VERSIONHASH() ([32]byte, error) {
	return _Committee.Contract.VERSIONHASH(&_Committee.CallOpts)
}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) VERSIONHASH() ([32]byte, error) {
	return _Committee.Contract.VERSIONHASH(&_Committee.CallOpts)
}

// AddedAddrs is a free data retrieval call binding the contract method 0x3d22485b.
//
// Solidity: function addedAddrs(uint256 , uint256 ) view returns(address)
func (_Committee *CommitteeCaller) AddedAddrs(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "addedAddrs", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AddedAddrs is a free data retrieval call binding the contract method 0x3d22485b.
//
// Solidity: function addedAddrs(uint256 , uint256 ) view returns(address)
func (_Committee *CommitteeSession) AddedAddrs(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.AddedAddrs(&_Committee.CallOpts, arg0, arg1)
}

// AddedAddrs is a free data retrieval call binding the contract method 0x3d22485b.
//
// Solidity: function addedAddrs(uint256 , uint256 ) view returns(address)
func (_Committee *CommitteeCallerSession) AddedAddrs(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.AddedAddrs(&_Committee.CallOpts, arg0, arg1)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeSession) GetChainId() (*big.Int, error) {
	return _Committee.Contract.GetChainId(&_Committee.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeCallerSession) GetChainId() (*big.Int, error) {
	return _Committee.Contract.GetChainId(&_Committee.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xcf7aa211.
//
// Solidity: function getCommittee(uint256 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeCaller) GetCommittee(opts *bind.CallOpts, chainID *big.Int, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getCommittee", chainID, blockNumber)

	outstruct := new(struct {
		CurrentCommittee ILagrangeCommitteeCommitteeData
		NextRoot         *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CurrentCommittee = *abi.ConvertType(out[0], new(ILagrangeCommitteeCommitteeData)).(*ILagrangeCommitteeCommitteeData)
	outstruct.NextRoot = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xcf7aa211.
//
// Solidity: function getCommittee(uint256 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeSession) GetCommittee(chainID *big.Int, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetCommittee is a free data retrieval call binding the contract method 0xcf7aa211.
//
// Solidity: function getCommittee(uint256 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeCallerSession) GetCommittee(chainID *big.Int, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0xc364091e.
//
// Solidity: function getEpochNumber(uint256 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeCaller) GetEpochNumber(opts *bind.CallOpts, chainID *big.Int, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getEpochNumber", chainID, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochNumber is a free data retrieval call binding the contract method 0xc364091e.
//
// Solidity: function getEpochNumber(uint256 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeSession) GetEpochNumber(chainID *big.Int, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0xc364091e.
//
// Solidity: function getEpochNumber(uint256 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetEpochNumber(chainID *big.Int, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetLeafHash is a free data retrieval call binding the contract method 0x55c1c2bc.
//
// Solidity: function getLeafHash((address,uint256,bytes) cleaf) view returns(uint256)
func (_Committee *CommitteeCaller) GetLeafHash(opts *bind.CallOpts, cleaf ILagrangeCommitteeCommitteeLeaf) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getLeafHash", cleaf)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLeafHash is a free data retrieval call binding the contract method 0x55c1c2bc.
//
// Solidity: function getLeafHash((address,uint256,bytes) cleaf) view returns(uint256)
func (_Committee *CommitteeSession) GetLeafHash(cleaf ILagrangeCommitteeCommitteeLeaf) (*big.Int, error) {
	return _Committee.Contract.GetLeafHash(&_Committee.CallOpts, cleaf)
}

// GetLeafHash is a free data retrieval call binding the contract method 0x55c1c2bc.
//
// Solidity: function getLeafHash((address,uint256,bytes) cleaf) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetLeafHash(cleaf ILagrangeCommitteeCommitteeLeaf) (*big.Int, error) {
	return _Committee.Contract.GetLeafHash(&_Committee.CallOpts, cleaf)
}

// GetLeafSlices is a free data retrieval call binding the contract method 0xf39ead65.
//
// Solidity: function getLeafSlices((address,uint256,bytes) leaf) pure returns(uint96[11] slices)
func (_Committee *CommitteeCaller) GetLeafSlices(opts *bind.CallOpts, leaf ILagrangeCommitteeCommitteeLeaf) ([11]*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getLeafSlices", leaf)

	if err != nil {
		return *new([11]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([11]*big.Int)).(*[11]*big.Int)

	return out0, err

}

// GetLeafSlices is a free data retrieval call binding the contract method 0xf39ead65.
//
// Solidity: function getLeafSlices((address,uint256,bytes) leaf) pure returns(uint96[11] slices)
func (_Committee *CommitteeSession) GetLeafSlices(leaf ILagrangeCommitteeCommitteeLeaf) ([11]*big.Int, error) {
	return _Committee.Contract.GetLeafSlices(&_Committee.CallOpts, leaf)
}

// GetLeafSlices is a free data retrieval call binding the contract method 0xf39ead65.
//
// Solidity: function getLeafSlices((address,uint256,bytes) leaf) pure returns(uint96[11] slices)
func (_Committee *CommitteeCallerSession) GetLeafSlices(leaf ILagrangeCommitteeCommitteeLeaf) ([11]*big.Int, error) {
	return _Committee.Contract.GetLeafSlices(&_Committee.CallOpts, leaf)
}

// GetNext1CommitteeRoot is a free data retrieval call binding the contract method 0xadacd992.
//
// Solidity: function getNext1CommitteeRoot(uint256 chainID) view returns(uint256)
func (_Committee *CommitteeCaller) GetNext1CommitteeRoot(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getNext1CommitteeRoot", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNext1CommitteeRoot is a free data retrieval call binding the contract method 0xadacd992.
//
// Solidity: function getNext1CommitteeRoot(uint256 chainID) view returns(uint256)
func (_Committee *CommitteeSession) GetNext1CommitteeRoot(chainID *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetNext1CommitteeRoot(&_Committee.CallOpts, chainID)
}

// GetNext1CommitteeRoot is a free data retrieval call binding the contract method 0xadacd992.
//
// Solidity: function getNext1CommitteeRoot(uint256 chainID) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetNext1CommitteeRoot(chainID *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetNext1CommitteeRoot(&_Committee.CallOpts, chainID)
}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeCaller) GetServeUntilBlock(opts *bind.CallOpts, operator common.Address) (uint32, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getServeUntilBlock", operator)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeSession) GetServeUntilBlock(operator common.Address) (uint32, error) {
	return _Committee.Contract.GetServeUntilBlock(&_Committee.CallOpts, operator)
}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeCallerSession) GetServeUntilBlock(operator common.Address) (uint32, error) {
	return _Committee.Contract.GetServeUntilBlock(&_Committee.CallOpts, operator)
}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeCaller) GetSlashed(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getSlashed", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeSession) GetSlashed(operator common.Address) (bool, error) {
	return _Committee.Contract.GetSlashed(&_Committee.CallOpts, operator)
}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeCallerSession) GetSlashed(operator common.Address) (bool, error) {
	return _Committee.Contract.GetSlashed(&_Committee.CallOpts, operator)
}

// IsUpdatable is a free data retrieval call binding the contract method 0xc0050642.
//
// Solidity: function isUpdatable(uint256 epochNumber, uint256 chainID) view returns(bool)
func (_Committee *CommitteeCaller) IsUpdatable(opts *bind.CallOpts, epochNumber *big.Int, chainID *big.Int) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isUpdatable", epochNumber, chainID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUpdatable is a free data retrieval call binding the contract method 0xc0050642.
//
// Solidity: function isUpdatable(uint256 epochNumber, uint256 chainID) view returns(bool)
func (_Committee *CommitteeSession) IsUpdatable(epochNumber *big.Int, chainID *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, epochNumber, chainID)
}

// IsUpdatable is a free data retrieval call binding the contract method 0xc0050642.
//
// Solidity: function isUpdatable(uint256 epochNumber, uint256 chainID) view returns(bool)
func (_Committee *CommitteeCallerSession) IsUpdatable(epochNumber *big.Int, chainID *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, epochNumber, chainID)
}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, uint32 serveUntilBlock, bool slashed)
func (_Committee *CommitteeCaller) Operators(opts *bind.CallOpts, arg0 common.Address) (struct {
	Amount          *big.Int
	BlsPubKey       []byte
	ServeUntilBlock uint32
	Slashed         bool
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "operators", arg0)

	outstruct := new(struct {
		Amount          *big.Int
		BlsPubKey       []byte
		ServeUntilBlock uint32
		Slashed         bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BlsPubKey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.ServeUntilBlock = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.Slashed = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, uint32 serveUntilBlock, bool slashed)
func (_Committee *CommitteeSession) Operators(arg0 common.Address) (struct {
	Amount          *big.Int
	BlsPubKey       []byte
	ServeUntilBlock uint32
	Slashed         bool
}, error) {
	return _Committee.Contract.Operators(&_Committee.CallOpts, arg0)
}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, uint32 serveUntilBlock, bool slashed)
func (_Committee *CommitteeCallerSession) Operators(arg0 common.Address) (struct {
	Amount          *big.Int
	BlsPubKey       []byte
	ServeUntilBlock uint32
	Slashed         bool
}, error) {
	return _Committee.Contract.Operators(&_Committee.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCallerSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// RemovedAddrs is a free data retrieval call binding the contract method 0x244cef9c.
//
// Solidity: function removedAddrs(uint256 , uint256 ) view returns(address)
func (_Committee *CommitteeCaller) RemovedAddrs(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "removedAddrs", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemovedAddrs is a free data retrieval call binding the contract method 0x244cef9c.
//
// Solidity: function removedAddrs(uint256 , uint256 ) view returns(address)
func (_Committee *CommitteeSession) RemovedAddrs(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.RemovedAddrs(&_Committee.CallOpts, arg0, arg1)
}

// RemovedAddrs is a free data retrieval call binding the contract method 0x244cef9c.
//
// Solidity: function removedAddrs(uint256 , uint256 ) view returns(address)
func (_Committee *CommitteeCallerSession) RemovedAddrs(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.RemovedAddrs(&_Committee.CallOpts, arg0, arg1)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCaller) Service(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "service")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCallerSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x1492d9af.
//
// Solidity: function updatedEpoch(uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) UpdatedEpoch(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "updatedEpoch", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x1492d9af.
//
// Solidity: function updatedEpoch(uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) UpdatedEpoch(arg0 *big.Int) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x1492d9af.
//
// Solidity: function updatedEpoch(uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) UpdatedEpoch(arg0 *big.Int) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// AddOperator is a paid mutator transaction binding the contract method 0xcd174cde.
//
// Solidity: function addOperator(address operator, uint256 chainID, bytes blsPubKey, uint256 stake, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeTransactor) AddOperator(opts *bind.TransactOpts, operator common.Address, chainID *big.Int, blsPubKey []byte, stake *big.Int, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "addOperator", operator, chainID, blsPubKey, stake, serveUntilBlock)
}

// AddOperator is a paid mutator transaction binding the contract method 0xcd174cde.
//
// Solidity: function addOperator(address operator, uint256 chainID, bytes blsPubKey, uint256 stake, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeSession) AddOperator(operator common.Address, chainID *big.Int, blsPubKey []byte, stake *big.Int, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, chainID, blsPubKey, stake, serveUntilBlock)
}

// AddOperator is a paid mutator transaction binding the contract method 0xcd174cde.
//
// Solidity: function addOperator(address operator, uint256 chainID, bytes blsPubKey, uint256 stake, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeTransactorSession) AddOperator(operator common.Address, chainID *big.Int, blsPubKey []byte, stake *big.Int, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, chainID, blsPubKey, stake, serveUntilBlock)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "initialize", initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeSession) Initialize(initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeTransactorSession) Initialize(initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xb40cfbe4.
//
// Solidity: function registerChain(uint256 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeTransactor) RegisterChain(opts *bind.TransactOpts, chainID *big.Int, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "registerChain", chainID, epochPeriod, freezeDuration)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xb40cfbe4.
//
// Solidity: function registerChain(uint256 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeSession) RegisterChain(chainID *big.Int, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, epochPeriod, freezeDuration)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xb40cfbe4.
//
// Solidity: function registerChain(uint256 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeTransactorSession) RegisterChain(chainID *big.Int, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, epochPeriod, freezeDuration)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// SetSlashed is a paid mutator transaction binding the contract method 0x6241171f.
//
// Solidity: function setSlashed(address operator, uint256 chainID, bool slashed) returns()
func (_Committee *CommitteeTransactor) SetSlashed(opts *bind.TransactOpts, operator common.Address, chainID *big.Int, slashed bool) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "setSlashed", operator, chainID, slashed)
}

// SetSlashed is a paid mutator transaction binding the contract method 0x6241171f.
//
// Solidity: function setSlashed(address operator, uint256 chainID, bool slashed) returns()
func (_Committee *CommitteeSession) SetSlashed(operator common.Address, chainID *big.Int, slashed bool) (*types.Transaction, error) {
	return _Committee.Contract.SetSlashed(&_Committee.TransactOpts, operator, chainID, slashed)
}

// SetSlashed is a paid mutator transaction binding the contract method 0x6241171f.
//
// Solidity: function setSlashed(address operator, uint256 chainID, bool slashed) returns()
func (_Committee *CommitteeTransactorSession) SetSlashed(operator common.Address, chainID *big.Int, slashed bool) (*types.Transaction, error) {
	return _Committee.Contract.SetSlashed(&_Committee.TransactOpts, operator, chainID, slashed)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// Update is a paid mutator transaction binding the contract method 0x82ab890a.
//
// Solidity: function update(uint256 chainID) returns()
func (_Committee *CommitteeTransactor) Update(opts *bind.TransactOpts, chainID *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "update", chainID)
}

// Update is a paid mutator transaction binding the contract method 0x82ab890a.
//
// Solidity: function update(uint256 chainID) returns()
func (_Committee *CommitteeSession) Update(chainID *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID)
}

// Update is a paid mutator transaction binding the contract method 0x82ab890a.
//
// Solidity: function update(uint256 chainID) returns()
func (_Committee *CommitteeTransactorSession) Update(chainID *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID)
}

// CommitteeInitCommitteeIterator is returned from FilterInitCommittee and is used to iterate over the raw logs and unpacked data for InitCommittee events raised by the Committee contract.
type CommitteeInitCommitteeIterator struct {
	Event *CommitteeInitCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitCommittee represents a InitCommittee event raised by the Committee contract.
type CommitteeInitCommittee struct {
	ChainID        *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInitCommittee is a free log retrieval operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) FilterInitCommittee(opts *bind.FilterOpts) (*CommitteeInitCommitteeIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "InitCommittee")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitCommitteeIterator{contract: _Committee.contract, event: "InitCommittee", logs: logs, sub: sub}, nil
}

// WatchInitCommittee is a free log subscription operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) WatchInitCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeInitCommittee) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "InitCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitCommittee)
				if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitCommittee is a log parse operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) ParseInitCommittee(log types.Log) (*CommitteeInitCommittee, error) {
	event := new(CommitteeInitCommittee)
	if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Committee contract.
type CommitteeInitializedIterator struct {
	Event *CommitteeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitialized represents a Initialized event raised by the Committee contract.
type CommitteeInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) FilterInitialized(opts *bind.FilterOpts) (*CommitteeInitializedIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitializedIterator{contract: _Committee.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CommitteeInitialized) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitialized)
				if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) ParseInitialized(log types.Log) (*CommitteeInitialized, error) {
	event := new(CommitteeInitialized)
	if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Committee contract.
type CommitteeOwnershipTransferredIterator struct {
	Event *CommitteeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeOwnershipTransferred represents a OwnershipTransferred event raised by the Committee contract.
type CommitteeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CommitteeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeOwnershipTransferredIterator{contract: _Committee.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitteeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeOwnershipTransferred)
				if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) ParseOwnershipTransferred(log types.Log) (*CommitteeOwnershipTransferred, error) {
	event := new(CommitteeOwnershipTransferred)
	if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeUpdateCommitteeIterator is returned from FilterUpdateCommittee and is used to iterate over the raw logs and unpacked data for UpdateCommittee events raised by the Committee contract.
type CommitteeUpdateCommitteeIterator struct {
	Event *CommitteeUpdateCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeUpdateCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeUpdateCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeUpdateCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeUpdateCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeUpdateCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeUpdateCommittee represents a UpdateCommittee event raised by the Committee contract.
type CommitteeUpdateCommittee struct {
	ChainID *big.Int
	Current [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommittee is a free log retrieval operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) FilterUpdateCommittee(opts *bind.FilterOpts) (*CommitteeUpdateCommitteeIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "UpdateCommittee")
	if err != nil {
		return nil, err
	}
	return &CommitteeUpdateCommitteeIterator{contract: _Committee.contract, event: "UpdateCommittee", logs: logs, sub: sub}, nil
}

// WatchUpdateCommittee is a free log subscription operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) WatchUpdateCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeUpdateCommittee) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "UpdateCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeUpdateCommittee)
				if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommittee is a log parse operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) ParseUpdateCommittee(log types.Log) (*CommitteeUpdateCommittee, error) {
	event := new(CommitteeUpdateCommittee)
	if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
