// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package committee

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ILagrangeCommitteeCommitteeData is an auto generated low-level Go binding around an user-defined struct.
type ILagrangeCommitteeCommitteeData struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}

// CommitteeMetaData contains all meta data concerning the Committee contract.
var CommitteeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractILagrangeService\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"contractIVoteWeigher\",\"name\":\"_voteWeigher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"name\":\"InitCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"current\",\"type\":\"bytes32\"}],\"name\":\"UpdateCommittee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNT_CREATION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORISE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMITTEE_CURRENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMITTEE_NEXT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HERMEZ_NETWORK_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committeeAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"committeeHeights\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"committeeLeavesMap\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committeeNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"committeeParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"freezeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getBlsPubKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"}],\"internalType\":\"structILagrangeCommittee.CommitteeData\",\"name\":\"currentCommittee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nextRoot\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opAddr\",\"type\":\"address\"}],\"name\":\"getLeafHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getServeUntilBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getSlashed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon1Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon2Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon3Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon4Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon5Elements\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poseidon6Elements\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isUnregisterable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"isUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"blsPubKey\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"slashed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"serveUntilBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"unsubscribedBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contractILagrangeService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"subscribeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"unsubscribeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"updateOperatorAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"updatedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteWeigher\",\"outputs\":[{\"internalType\":\"contractIVoteWeigher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80637285645511610146578063c473af33116100c3578063e377dcad11610087578063e377dcad14610764578063e62f6b9214610799578063ef030673146107c0578063f1f2fcab14610258578063f2fde38b146107e7578063f5425bd5146107fa57600080fd5b8063c473af3314610698578063d598d4c9146106bf578063da16ce83146106e6578063db45fb3d14610717578063def9e7d51461072a57600080fd5b80638dfccad81161010a5780638dfccad8146105e4578063999c3b4a146106045780639e4e731814610624578063a63490a21461064b578063bf988ab61461068557600080fd5b8063728564551461054757806378d81d08146105915780637d99c864146105a457806385ab9a7a146105ac5780638da5cb5b146105bf57600080fd5b806338c8ee64116101d45780634db6f74a116101985780634db6f74a146104e65780634edd2469146105065780635b7b108c146105195780636b11c38e1461052c578063715018a61461053f57600080fd5b806338c8ee64146104225780633bc72805146104355780633d6a26791461044857806344a5c4bf1461045b57806344f5b6b4146104a757600080fd5b806319a74c5f1161021b57806319a74c5f146103055780633408e4701461032f57806334ae75071461033557806335876476146103665780633644e5151461037957600080fd5b806304622c2e14610258578063046684dc146102925780630e9f564b146102a75780631300aff0146102ba57806313e7c9d8146102e1575b600080fd5b61027f7fbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad81565b6040519081526020015b60405180910390f35b6102a56102a0366004612a0f565b610802565b005b6102a56102b5366004612a57565b610825565b61027f7fff946cf82975b1a2b6e6d28c9a76a4b8d7a1fd0592b785cb92771933310f9ee781565b6102f46102ef366004612a8c565b610aeb565b604051610289959493929190612afd565b610318610313366004612a8c565b610bad565b604080519215158352602083019190915201610289565b4661027f565b61027f610343366004612b39565b606e60209081526000938452604080852082529284528284209052825290205481565b6102a5610374366004612b7e565b610c12565b61027f60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7fbe287413178bfeddef8d9753ad4be825ae998706a6dabff23978b59dccaea0ad7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6102a5610430366004612a8c565b610e26565b6102a5610443366004612c14565b610f63565b610318610456366004612c3e565b611038565b610492610469366004612a8c565b6001600160a01b0316600090815260736020526040902060020154610100900463ffffffff1690565b60405163ffffffff9091168152602001610289565b6104d66104b5366004612a8c565b6001600160a01b031660009081526073602052604090206002015460ff1690565b6040519015158152602001610289565b61027f6104f4366004612c3e565b60746020526000908152604090205481565b6102a5610514366004612c6f565b6110d6565b61027f610527366004612a8c565b611266565b6102a561053a366004612a57565b611658565b6102a56118d4565b610576610555366004612c3e565b606b6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610289565b61027f61059f366004612c14565b6118e8565b61027f600181565b6104d66105ba366004612c14565b611925565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610289565b61027f6105f2366004612c3e565b606d6020526000908152604090205481565b610617610612366004612a8c565b61198a565b6040516102899190612d43565b61027f7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b610576610659366004612c14565b606c60209081526000928352604080842090915290825290208054600182015460029092015490919083565b6105cc610693366004612c14565b611a39565b61027f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6105cc7f000000000000000000000000000000000000000000000000000000000000000081565b6104926106f4366004612d56565b606f60209081526000928352604080842090915290825290205463ffffffff1681565b6102a5610725366004612a8c565b611a71565b61073d610738366004612c14565b611c8b565b60408051835181526020808501519082015292810151908301526060820152608001610289565b610787610772366004612c3e565b60706020526000908152604090205460ff1681565b60405160ff9091168152602001610289565b61027f7fafd642c6a37a2e6887dc4ad5142f84197828a904e53d3204ecb1100329231eaa81565b6105cc7f000000000000000000000000000000000000000000000000000000000000000081565b6102a56107f5366004612a8c565b611d25565b61027f600081565b61080a611d9b565b610815838383611df5565b610820836000611f2c565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108765760405162461bcd60e51b815260040161086d90612d8d565b60405180910390fd5b6001600160a01b0382166000908152607360205260409020600281015460ff16156108b35760405162461bcd60e51b815260040161086d90612dda565b60038101546000905b80821015610921578363ffffffff168360030183815481106108e0576108e0612e08565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16141561090f57610921565b8161091981612e34565b9250506108bc565b80821061097e5760405162461bcd60e51b815260206004820152602560248201527f5468652064656469636174656420636861696e206973206e6f742073756273636044820152641c9a58995960da1b606482015260840161086d565b60008061098a86611038565b9150915081156109dc5760405162461bcd60e51b815260206004820152601e60248201527f5468652064656469636174656420636861696e206973206c6f636b65642e0000604482015260640161086d565b600385016109eb600185612e4f565b815481106109fb576109fb612e08565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16856003018581548110610a3657610a36612e08565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555084600301805480610a7c57610a7c612e66565b60008281526020808220600860001990940193840401805463ffffffff60046007871681026101000a820219909216909255939094559289168152600588019092526040909120829055850154811115610ad857600485018190555b610ae2878761205d565b50505050505050565b60736020526000908152604090208054600182018054919291610b0d90612e7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3990612e7c565b8015610b865780601f10610b5b57610100808354040283529160200191610b86565b820191906000526020600020905b815481529060010190602001808311610b6957829003601f168201915b505050506002830154600490930154919260ff81169261010090910463ffffffff16915085565b6001600160a01b0381166000908152607360205260408120600281015482919060ff1615610bed5760405162461bcd60e51b815260040161086d90612dda565b600381015415610c035750600093849350915050565b60040154600194909350915050565b600054610100900460ff1615808015610c325750600054600160ff909116105b80610c4c5750303b158015610c4c575060005460ff166001145b610caf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161086d565b6000805460ff191660011790558015610cd2576000805461ff0019166101001790555b606580546001600160a01b03199081166001600160a01b03808b1691909117909255606680548216838a16179055606780548216838916179055606880548216838816179055606980548216838716179055606a805490911691841691909117905560015b60148160ff1611610dcc57610da7604051806040016040528060726000600186610d619190612eb7565b60ff1660ff16815260200190815260200160002054815260200160726000600186610d8c9190612eb7565b60ff1681526020810191909152604001600020549052612399565b60ff821660009081526072602052604090205580610dc481612eda565b915050610d37565b50610dd688612411565b8015610e1c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633998fdd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea89190612efa565b6001600160a01b0316336001600160a01b031614610ed85760405162461bcd60e51b815260040161086d90612f17565b6001600160a01b038116600090815260736020526040812060028101805460ff19166001179055905b600382015481101561082057610f5183836003018381548110610f2657610f26612e08565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1661205d565b80610f5b81612e34565b915050610f01565b610f6d8282611925565b610fd35760405162461bcd60e51b815260206004820152603160248201527f426c6f636b206e756d626572206973207072696f7220746f20636f6d6d69747460448201527032b290333932b2bd32903bb4b73237bb9760791b606482015260840161086d565b63ffffffff8216600090815260746020526040902054811161102a5760405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c903ab83230ba32b21760811b604482015260640161086d565b6110348282611f2c565b5050565b63ffffffff81166000908152606b6020526040812060010154819061106257506000928392509050565b600061106e84436118e8565b63ffffffff85166000908152606b602052604081208054600190910154929350909161109a9084612f6c565b6110a49190612f8b565b63ffffffff86166000908152606b60205260409020600201549091506110ca9082612e4f565b43119590945092505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461111e5760405162461bcd60e51b815260040161086d90612d8d565b60405163891f28a560e01b81526001600160a01b038481166004830152600160248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063891f28a5906044016020604051808303816000875af1158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b69190612fa3565b6001600160a01b0385166000908152607360205260409020805491925090156112215760405162461bcd60e51b815260206004820152601f60248201527f4f70657261746f7220697320616c726561647920726567697374657265642e00604482015260640161086d565b6001600160601b038216815560028101805464ffffffff00191661010063ffffffff861602179055835161125e906001830190602087019061293e565b505050505050565b60006112706129c2565b6001600160a01b0383166000908152607360205260408120905b60088110156113a35760408051600c80825281830190925260009160208201818036833701905050905060005b600c8110156113575760018401816112d085600c612f6c565b6112da9190612f8b565b81546112e590612e7c565b81106112f3576112f3612e08565b8154600116156113125790600052602060002090602091828204019190065b9054901a600160f81b0282828151811061132e5761132e612e08565b60200101906001600160f81b031916908160001a9053508061134f81612e34565b9150506112b7565b50600061136382612fcc565b90508060a01c8584600b811061137b5761137b612e08565b6001600160601b0390921660209290920201525081905061139b81612e34565b91505061128a565b5080546040516000916113ee9187919060200160609290921b6bffffffffffffffffffffffff1916825260801b6fffffffffffffffffffffffffffffffff1916601482015260240190565b604051602081830303815290604052905060005b60038110156114fc5760408051600c80825281830190925260009160208201818036833701905050905060005b600c8110156114a557838161144585600c612f6c565b61144f9190612f8b565b8151811061145f5761145f612e08565b602001015160f81c60f81b82828151811061147c5761147c612e08565b60200101906001600160f81b031916908160001a9053508061149d81612e34565b91505061142f565b5060006114b182612fcc565b905060a081901c866114c4856008612f8b565b600b81106114d4576114d4612e08565b6001600160601b039092166020929092020152508190506114f481612e34565b915050611402565b50604080516101008101825284516001600160601b039081168284019081526020870151821660608085019190915293870151821660808085019190915293870151821660a0840152928601511660c082015261164f9181906115759060e0830188600560200201516001600160601b03169052612463565b81526020016116486040518060a00160405280886006600b811061159b5761159b612e08565b60200201516001600160601b03168152602001886007600b81106115c1576115c1612e08565b60200201516001600160601b03168152602001886008600b81106115e7576115e7612e08565b60200201516001600160601b03168152602001886009600b811061160d5761160d612e08565b60200201516001600160601b0316815260200188600a600b811061163357611633612e08565b60200201516001600160601b03169052612494565b9052612399565b95945050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116a05760405162461bcd60e51b815260040161086d90612d8d565b60006116ab82611038565b50905080156116fc5760405162461bcd60e51b815260206004820152601e60248201527f5468652064656469636174656420636861696e206973206c6f636b65642e0000604482015260640161086d565b6001600160a01b0383166000908152607360205260409020600281015460ff16156117395760405162461bcd60e51b815260040161086d90612dda565b63ffffffff8316600090815260058201602052604090205480158015906117605750438110155b156117c15760405162461bcd60e51b815260206004820152602b60248201527f5468652064656463696174656420636861696e206973207768696c6520756e7360448201526a3ab139b1b934b134b7339760a91b606482015260840161086d565b60005b6003830154811015611883578463ffffffff168360030182815481106117ec576117ec612e08565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1614156118715760405162461bcd60e51b815260206004820152602a60248201527f5468652064656469636174656420636861696e20697320616c726561647920736044820152693ab139b1b934b132b21760b11b606482015260840161086d565b8061187b81612e34565b9150506117c4565b50600382018054600181018255600091825260209091206008820401805460079092166004026101000a63ffffffff81810219909316928716029190911790556118cd85856124c5565b5050505050565b6118dc611d9b565b6118e66000612411565b565b63ffffffff82166000908152606b602052604081208054600190910154806119108386612e4f565b61191a9190613003565b61164f906001612f8b565b63ffffffff82166000908152606b60205260408120805460019091015482919061194f9085612f6c565b6119599190612f8b565b63ffffffff85166000908152606b602052604090206002015490915061197f8183612e4f565b431195945050505050565b6001600160a01b03811660009081526073602052604090206001018054606091906119b490612e7c565b80601f01602080910402602001604051908101604052809291908181526020018280546119e090612e7c565b8015611a2d5780601f10611a0257610100808354040283529160200191611a2d565b820191906000526020600020905b815481529060010190602001808311611a1057829003601f168201915b50505050509050919050565b60716020528160005260406000208181548110611a5557600080fd5b6000918252602090912001546001600160a01b03169150829050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633998fdd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af39190612efa565b6001600160a01b0316336001600160a01b031614611b235760405162461bcd60e51b815260040161086d90612f17565b6001600160a01b03811660009081526073602052604090206002015460ff1615611b4a5750565b60005b6001600160a01b0382166000908152607360205260409020600301548110156110345760405163891f28a560e01b81526001600160a01b03808416600483015260016024830152611c769184917f0000000000000000000000000000000000000000000000000000000000000000169063891f28a5906044016020604051808303816000875af1158015611be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c099190612fa3565b6001600160601b031660736000866001600160a01b03166001600160a01b031681526020019081526020016000206003018481548110611c4b57611c4b612e08565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16612647565b80611c8081612e34565b915050611b4d565b50565b611caf60405180606001604052806000815260200160008152602001600081525090565b600080611cbc85856118e8565b90506000611ccf8661059f876001612f8b565b63ffffffff969096166000908152606c6020908152604080832094835284825280832081516060810183528154815260018201548185015260029091015481830152988352939052919091205494959350505050565b611d2d611d9b565b6001600160a01b038116611d925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086d565b611c8881612411565b6033546001600160a01b031633146118e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086d565b63ffffffff83166000908152606b602052604090205415611e685760405162461bcd60e51b815260206004820152602760248201527f436f6d6d69747465652068617320616c7265616479206265656e20696e69746960448201526630b634bd32b21760c91b606482015260840161086d565b6040805160608082018352438252602080830186815283850186815263ffffffff89166000818152606b8552878120965187559251600180880191909155915160029687015586518086018852838152808501848152818901858152838652606c87528986208680528752948990209151825551928101929092559151940193909355835192835282018590529181018390527fd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc491015b60405180910390a1505050565b6000611f39600183612f8b565b63ffffffff8416600081815260716020908152604080832054606c835281842086855283528184206001015592825260709052205490915060ff1615611fe55763ffffffff83166000908152606e602090815260408083206070909252822054909190611fab9060019060ff16612eb7565b60ff1681526020808201929092526040908101600090812081805283528181205463ffffffff87168252606c845282822085835290935220555b63ffffffff83166000818152606d6020908152604080832054606c83528184208685528084528285206002810192909255858552607484528285208890559386905292825291548251938452908301527fc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd9089101611f1f565b6001600160a01b03821660009081526073602090815260408083205463ffffffff85168452606d909252822080549192909161209a908490612e4f565b909155505063ffffffff8082166000818152606f602090815260408083206001600160a01b038816845282528083205493835260719091528120549190921691906120e790600190612e4f565b63ffffffff84166000908152607160205260408120805492935090918390811061211357612113612e08565b6000918252602090912001546001600160a01b0316905063ffffffff83168211156121ed5763ffffffff8481166000818152606e6020908152604080832083805282528083208784528252808320549488168084528184209590955592825260719052208054839290811061218a5761218a612e08565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905563ffffffff8781168352606f82526040808420948616845293909152919020805463ffffffff191691851691821790556121ed908590612731565b63ffffffff8416600090815260716020526040902080548061221157612211612e66565b60008281526020808220830160001990810180546001600160a01b031916905590920190925563ffffffff8616825260708152604080832054606e83528184208480528352818420868552909252822082905560ff1660015b8160ff168160ff161015610e1c5782806122875750846001166001145b156122a957600192506122a48761229e8584612eb7565b87612790565b61237a565b63ffffffff87166000908152606e6020908152604080832060ff851684529091528120816122d8600289613003565b81526020810191909152604001600020556122f4600283612eb7565b60ff168160ff16141561237a5763ffffffff87166000908152606e6020526040812081612322600186612eb7565b60ff1681526020808201929092526040908101600090812081805290925290205561234e600183612eb7565b63ffffffff88166000908152607060205260409020805460ff191660ff92909216919091179055610e1c565b612385600286613003565b94508061239181612eda565b91505061226a565b6066546040516314d2f97b60e11b81526000916001600160a01b0316906329a5f2f6906123ca908590600401613025565b602060405180830381865afa1580156123e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240b9190613056565b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606a54604051631eb694f160e31b81526000916001600160a01b03169063f5b4a788906123ca90859060040161306f565b606954604051630926f44b60e31b81526000916001600160a01b031690634937a258906123ca908590600401613097565b6001600160a01b03821660009081526073602090815260408083205463ffffffff85168452606d9092528220805491929091612502908490612f8b565b909155505063ffffffff81166000908152607160209081526040822080546001810182559083529120810180546001600160a01b0319166001600160a01b03851617905561254f83611266565b63ffffffff8084166000818152606e60209081526040808320838052825280832094871680845294825280832095909555918152606f82528381206001600160a01b038816825290915291909120805463ffffffff19168217905515806125e6575063ffffffff82166000908152607060205260409020546125d69060019060ff16612eb7565b60ff166001901b8163ffffffff16145b156126375763ffffffff821660009081526070602052604090205461260f9060ff1660016130bf565b63ffffffff83166000908152607060205260409020805460ff191660ff929092169190911790555b610820828263ffffffff16612731565b63ffffffff8082166000908152606f602090815260408083206001600160a01b03881684529091529020541661267c84611266565b63ffffffff83166000818152606e6020908152604080832083805282528083208684528252808320949094556001600160a01b03881682526073815283822054928252606d90529182208054919290916126d7908490612e4f565b909155505063ffffffff82166000908152606d602052604081208054859290612701908490612f8b565b90915550506001600160a01b038416600090815260736020526040902083905561272b8282612731565b50505050565b60005b63ffffffff83166000908152607060205260409020546127599060019060ff16612eb7565b60ff168160ff16101561082057612771838284612790565b61277c600283613003565b91508061278881612eda565b915050612734565b60008082600116600114156128115763ffffffff85166000908152606e6020908152604080832060ff881684529091528120906127ce600186612e4f565b8152602080820192909252604090810160009081205463ffffffff89168252606e845282822060ff891683528452828220878352909352205490925090506128c5565b63ffffffff85166000908152606e6020908152604080832060ff881680855281845282852088865280855292852054908552925290935090612854856001612f8b565b81526020019081526020016000205460001415612884575060ff83166000908152607260205260409020546128c5565b63ffffffff85166000908152606e6020908152604080832060ff881684529091528120906128b3856001612f8b565b81526020019081526020016000205490505b6128e2604051806040016040528084815260200183815250612399565b63ffffffff86166000908152606e60205260408120906129038760016130bf565b60ff1660ff16815260200190815260200160002060006002866129269190613003565b81526020810191909152604001600020555050505050565b82805461294a90612e7c565b90600052602060002090601f01602090048101928261296c57600085556129b2565b82601f1061298557805160ff19168380011785556129b2565b828001600101855582156129b2579182015b828111156129b2578251825591602001919060010190612997565b506129be9291506129e1565b5090565b604051806101600160405280600b906020820280368337509192915050565b5b808211156129be57600081556001016129e2565b803563ffffffff81168114612a0a57600080fd5b919050565b600080600060608486031215612a2457600080fd5b612a2d846129f6565b95602085013595506040909401359392505050565b6001600160a01b0381168114611c8857600080fd5b60008060408385031215612a6a57600080fd5b8235612a7581612a42565b9150612a83602084016129f6565b90509250929050565b600060208284031215612a9e57600080fd5b8135612aa981612a42565b9392505050565b6000815180845260005b81811015612ad657602081850181015186830182015201612aba565b81811115612ae8576000602083870101525b50601f01601f19169290920160200192915050565b85815260a060208201526000612b1660a0830187612ab0565b94151560408301525063ffffffff92909216606083015260809091015292915050565b600080600060608486031215612b4e57600080fd5b612b57846129f6565b9250602084013560ff81168114612b6d57600080fd5b929592945050506040919091013590565b600080600080600080600060e0888a031215612b9957600080fd5b8735612ba481612a42565b96506020880135612bb481612a42565b95506040880135612bc481612a42565b94506060880135612bd481612a42565b93506080880135612be481612a42565b925060a0880135612bf481612a42565b915060c0880135612c0481612a42565b8091505092959891949750929550565b60008060408385031215612c2757600080fd5b612c30836129f6565b946020939093013593505050565b600060208284031215612c5057600080fd5b612aa9826129f6565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215612c8457600080fd5b8335612c8f81612a42565b9250602084013567ffffffffffffffff80821115612cac57600080fd5b818601915086601f830112612cc057600080fd5b813581811115612cd257612cd2612c59565b604051601f8201601f19908116603f01168101908382118183101715612cfa57612cfa612c59565b81604052828152896020848701011115612d1357600080fd5b826020860160208301376000602084830101528096505050505050612d3a604085016129f6565b90509250925092565b602081526000612aa96020830184612ab0565b60008060408385031215612d6957600080fd5b612d72836129f6565b91506020830135612d8281612a42565b809150509250929050565b6020808252602d908201527f4f6e6c79204c616772616e676520736572766963652063616e2063616c6c207460408201526c3434b990333ab731ba34b7b71760991b606082015260800190565b60208082526014908201527327b832b930ba37b91034b99039b630b9b432b21760611b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612e4857612e48612e1e565b5060010190565b600082821015612e6157612e61612e1e565b500390565b634e487b7160e01b600052603160045260246000fd5b600181811c90821680612e9057607f821691505b60208210811415612eb157634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff841680821015612ed157612ed1612e1e565b90039392505050565b600060ff821660ff811415612ef157612ef1612e1e565b60010192915050565b600060208284031215612f0c57600080fd5b8151612aa981612a42565b60208082526035908201527f4f6e6c79204c616772616e67652073657276696365206d616e61676572206361604082015274371031b0b636103a3434b990333ab731ba34b7b71760591b606082015260800190565b6000816000190483118215151615612f8657612f86612e1e565b500290565b60008219821115612f9e57612f9e612e1e565b500190565b600060208284031215612fb557600080fd5b81516001600160601b0381168114612aa957600080fd5b805160208201516001600160a01b0319808216929190600c831015612ffb57808184600c0360031b1b83161693505b505050919050565b60008261302057634e487b7160e01b600052601260045260246000fd5b500490565b60408101818360005b600281101561304d57815183526020928301929091019060010161302e565b50505092915050565b60006020828403121561306857600080fd5b5051919050565b60c08101818360005b600681101561304d578151835260209283019290910190600101613078565b60a08101818360005b600581101561304d5781518352602092830192909101906001016130a0565b600060ff821660ff84168060ff038211156130dc576130dc612e1e565b01939250505056fea2646970667358221220fb906c8d8e4188db3d5a61b9b72deb5f3bdcb2d77fc376c227592bf560f764b064736f6c634300080c0033",
}

// CommitteeABI is the input ABI used to generate the binding from.
// Deprecated: Use CommitteeMetaData.ABI instead.
var CommitteeABI = CommitteeMetaData.ABI

// CommitteeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommitteeMetaData.Bin instead.
var CommitteeBin = CommitteeMetaData.Bin

// DeployCommittee deploys a new Ethereum contract, binding an instance of Committee to it.
func DeployCommittee(auth *bind.TransactOpts, backend bind.ContractBackend, _service common.Address, _voteWeigher common.Address) (common.Address, *types.Transaction, *Committee, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitteeBin), backend, _service, _voteWeigher)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// Committee is an auto generated Go binding around an Ethereum contract.
type Committee struct {
	CommitteeCaller     // Read-only binding to the contract
	CommitteeTransactor // Write-only binding to the contract
	CommitteeFilterer   // Log filterer for contract events
}

// CommitteeCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommitteeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommitteeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommitteeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommitteeSession struct {
	Contract     *Committee        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommitteeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommitteeCallerSession struct {
	Contract *CommitteeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// CommitteeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommitteeTransactorSession struct {
	Contract     *CommitteeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// CommitteeRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommitteeRaw struct {
	Contract *Committee // Generic contract binding to access the raw methods on
}

// CommitteeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommitteeCallerRaw struct {
	Contract *CommitteeCaller // Generic read-only contract binding to access the raw methods on
}

// CommitteeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommitteeTransactorRaw struct {
	Contract *CommitteeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommittee creates a new instance of Committee, bound to a specific deployed contract.
func NewCommittee(address common.Address, backend bind.ContractBackend) (*Committee, error) {
	contract, err := bindCommittee(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Committee{CommitteeCaller: CommitteeCaller{contract: contract}, CommitteeTransactor: CommitteeTransactor{contract: contract}, CommitteeFilterer: CommitteeFilterer{contract: contract}}, nil
}

// NewCommitteeCaller creates a new read-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeCaller(address common.Address, caller bind.ContractCaller) (*CommitteeCaller, error) {
	contract, err := bindCommittee(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeCaller{contract: contract}, nil
}

// NewCommitteeTransactor creates a new write-only instance of Committee, bound to a specific deployed contract.
func NewCommitteeTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitteeTransactor, error) {
	contract, err := bindCommittee(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeTransactor{contract: contract}, nil
}

// NewCommitteeFilterer creates a new log filterer instance of Committee, bound to a specific deployed contract.
func NewCommitteeFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitteeFilterer, error) {
	contract, err := bindCommittee(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitteeFilterer{contract: contract}, nil
}

// bindCommittee binds a generic wrapper to an already deployed contract.
func bindCommittee(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommitteeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.CommitteeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.CommitteeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Committee *CommitteeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Committee.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Committee *CommitteeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Committee *CommitteeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Committee.Contract.contract.Transact(opts, method, params...)
}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) ACCOUNTCREATIONHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "ACCOUNT_CREATION_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) ACCOUNTCREATIONHASH() ([32]byte, error) {
	return _Committee.Contract.ACCOUNTCREATIONHASH(&_Committee.CallOpts)
}

// ACCOUNTCREATIONHASH is a free data retrieval call binding the contract method 0x1300aff0.
//
// Solidity: function ACCOUNT_CREATION_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) ACCOUNTCREATIONHASH() ([32]byte, error) {
	return _Committee.Contract.ACCOUNTCREATIONHASH(&_Committee.CallOpts)
}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeCaller) AUTHORISETYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "AUTHORISE_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeSession) AUTHORISETYPEHASH() ([32]byte, error) {
	return _Committee.Contract.AUTHORISETYPEHASH(&_Committee.CallOpts)
}

// AUTHORISETYPEHASH is a free data retrieval call binding the contract method 0xe62f6b92.
//
// Solidity: function AUTHORISE_TYPEHASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) AUTHORISETYPEHASH() ([32]byte, error) {
	return _Committee.Contract.AUTHORISETYPEHASH(&_Committee.CallOpts)
}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeCaller) COMMITTEECURRENT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "COMMITTEE_CURRENT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeSession) COMMITTEECURRENT() (*big.Int, error) {
	return _Committee.Contract.COMMITTEECURRENT(&_Committee.CallOpts)
}

// COMMITTEECURRENT is a free data retrieval call binding the contract method 0xf5425bd5.
//
// Solidity: function COMMITTEE_CURRENT() view returns(uint256)
func (_Committee *CommitteeCallerSession) COMMITTEECURRENT() (*big.Int, error) {
	return _Committee.Contract.COMMITTEECURRENT(&_Committee.CallOpts)
}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeCaller) COMMITTEENEXT1(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "COMMITTEE_NEXT_1")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeSession) COMMITTEENEXT1() (*big.Int, error) {
	return _Committee.Contract.COMMITTEENEXT1(&_Committee.CallOpts)
}

// COMMITTEENEXT1 is a free data retrieval call binding the contract method 0x7d99c864.
//
// Solidity: function COMMITTEE_NEXT_1() view returns(uint256)
func (_Committee *CommitteeCallerSession) COMMITTEENEXT1() (*big.Int, error) {
	return _Committee.Contract.COMMITTEENEXT1(&_Committee.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Committee.Contract.DOMAINSEPARATOR(&_Committee.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32 domainSeparator)
func (_Committee *CommitteeCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Committee.Contract.DOMAINSEPARATOR(&_Committee.CallOpts)
}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) EIP712DOMAINHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "EIP712DOMAIN_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) EIP712DOMAINHASH() ([32]byte, error) {
	return _Committee.Contract.EIP712DOMAINHASH(&_Committee.CallOpts)
}

// EIP712DOMAINHASH is a free data retrieval call binding the contract method 0xc473af33.
//
// Solidity: function EIP712DOMAIN_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) EIP712DOMAINHASH() ([32]byte, error) {
	return _Committee.Contract.EIP712DOMAINHASH(&_Committee.CallOpts)
}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) HERMEZNETWORKHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "HERMEZ_NETWORK_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) HERMEZNETWORKHASH() ([32]byte, error) {
	return _Committee.Contract.HERMEZNETWORKHASH(&_Committee.CallOpts)
}

// HERMEZNETWORKHASH is a free data retrieval call binding the contract method 0xf1f2fcab.
//
// Solidity: function HERMEZ_NETWORK_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) HERMEZNETWORKHASH() ([32]byte, error) {
	return _Committee.Contract.HERMEZNETWORKHASH(&_Committee.CallOpts)
}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) NAMEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "NAME_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) NAMEHASH() ([32]byte, error) {
	return _Committee.Contract.NAMEHASH(&_Committee.CallOpts)
}

// NAMEHASH is a free data retrieval call binding the contract method 0x04622c2e.
//
// Solidity: function NAME_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) NAMEHASH() ([32]byte, error) {
	return _Committee.Contract.NAMEHASH(&_Committee.CallOpts)
}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeCaller) VERSIONHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "VERSION_HASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeSession) VERSIONHASH() ([32]byte, error) {
	return _Committee.Contract.VERSIONHASH(&_Committee.CallOpts)
}

// VERSIONHASH is a free data retrieval call binding the contract method 0x9e4e7318.
//
// Solidity: function VERSION_HASH() view returns(bytes32)
func (_Committee *CommitteeCallerSession) VERSIONHASH() ([32]byte, error) {
	return _Committee.Contract.VERSIONHASH(&_Committee.CallOpts)
}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeCaller) CommitteeAddrs(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeAddrs", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeSession) CommitteeAddrs(arg0 uint32, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.CommitteeAddrs(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeAddrs is a free data retrieval call binding the contract method 0xbf988ab6.
//
// Solidity: function committeeAddrs(uint32 , uint256 ) view returns(address)
func (_Committee *CommitteeCallerSession) CommitteeAddrs(arg0 uint32, arg1 *big.Int) (common.Address, error) {
	return _Committee.Contract.CommitteeAddrs(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeHeights is a free data retrieval call binding the contract method 0xe377dcad.
//
// Solidity: function committeeHeights(uint32 ) view returns(uint8)
func (_Committee *CommitteeCaller) CommitteeHeights(opts *bind.CallOpts, arg0 uint32) (uint8, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeHeights", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CommitteeHeights is a free data retrieval call binding the contract method 0xe377dcad.
//
// Solidity: function committeeHeights(uint32 ) view returns(uint8)
func (_Committee *CommitteeSession) CommitteeHeights(arg0 uint32) (uint8, error) {
	return _Committee.Contract.CommitteeHeights(&_Committee.CallOpts, arg0)
}

// CommitteeHeights is a free data retrieval call binding the contract method 0xe377dcad.
//
// Solidity: function committeeHeights(uint32 ) view returns(uint8)
func (_Committee *CommitteeCallerSession) CommitteeHeights(arg0 uint32) (uint8, error) {
	return _Committee.Contract.CommitteeHeights(&_Committee.CallOpts, arg0)
}

// CommitteeLeavesMap is a free data retrieval call binding the contract method 0xda16ce83.
//
// Solidity: function committeeLeavesMap(uint32 , address ) view returns(uint32)
func (_Committee *CommitteeCaller) CommitteeLeavesMap(opts *bind.CallOpts, arg0 uint32, arg1 common.Address) (uint32, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeLeavesMap", arg0, arg1)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CommitteeLeavesMap is a free data retrieval call binding the contract method 0xda16ce83.
//
// Solidity: function committeeLeavesMap(uint32 , address ) view returns(uint32)
func (_Committee *CommitteeSession) CommitteeLeavesMap(arg0 uint32, arg1 common.Address) (uint32, error) {
	return _Committee.Contract.CommitteeLeavesMap(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeLeavesMap is a free data retrieval call binding the contract method 0xda16ce83.
//
// Solidity: function committeeLeavesMap(uint32 , address ) view returns(uint32)
func (_Committee *CommitteeCallerSession) CommitteeLeavesMap(arg0 uint32, arg1 common.Address) (uint32, error) {
	return _Committee.Contract.CommitteeLeavesMap(&_Committee.CallOpts, arg0, arg1)
}

// CommitteeNodes is a free data retrieval call binding the contract method 0x34ae7507.
//
// Solidity: function committeeNodes(uint32 , uint8 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCaller) CommitteeNodes(opts *bind.CallOpts, arg0 uint32, arg1 uint8, arg2 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeNodes", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitteeNodes is a free data retrieval call binding the contract method 0x34ae7507.
//
// Solidity: function committeeNodes(uint32 , uint8 , uint256 ) view returns(uint256)
func (_Committee *CommitteeSession) CommitteeNodes(arg0 uint32, arg1 uint8, arg2 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeNodes(&_Committee.CallOpts, arg0, arg1, arg2)
}

// CommitteeNodes is a free data retrieval call binding the contract method 0x34ae7507.
//
// Solidity: function committeeNodes(uint32 , uint8 , uint256 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) CommitteeNodes(arg0 uint32, arg1 uint8, arg2 *big.Int) (*big.Int, error) {
	return _Committee.Contract.CommitteeNodes(&_Committee.CallOpts, arg0, arg1, arg2)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeCaller) CommitteeParams(opts *bind.CallOpts, arg0 uint32) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committeeParams", arg0)

	outstruct := new(struct {
		StartBlock     *big.Int
		Duration       *big.Int
		FreezeDuration *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.FreezeDuration = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeSession) CommitteeParams(arg0 uint32) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// CommitteeParams is a free data retrieval call binding the contract method 0x72856455.
//
// Solidity: function committeeParams(uint32 ) view returns(uint256 startBlock, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeCallerSession) CommitteeParams(arg0 uint32) (struct {
	StartBlock     *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
}, error) {
	return _Committee.Contract.CommitteeParams(&_Committee.CallOpts, arg0)
}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeCaller) Committees(opts *bind.CallOpts, arg0 uint32, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "committees", arg0, arg1)

	outstruct := new(struct {
		Root             *big.Int
		Height           *big.Int
		TotalVotingPower *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Height = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalVotingPower = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeSession) Committees(arg0 uint32, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// Committees is a free data retrieval call binding the contract method 0xa63490a2.
//
// Solidity: function committees(uint32 , uint256 ) view returns(uint256 root, uint256 height, uint256 totalVotingPower)
func (_Committee *CommitteeCallerSession) Committees(arg0 uint32, arg1 *big.Int) (struct {
	Root             *big.Int
	Height           *big.Int
	TotalVotingPower *big.Int
}, error) {
	return _Committee.Contract.Committees(&_Committee.CallOpts, arg0, arg1)
}

// GetBlsPubKey is a free data retrieval call binding the contract method 0x999c3b4a.
//
// Solidity: function getBlsPubKey(address operator) view returns(bytes)
func (_Committee *CommitteeCaller) GetBlsPubKey(opts *bind.CallOpts, operator common.Address) ([]byte, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getBlsPubKey", operator)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetBlsPubKey is a free data retrieval call binding the contract method 0x999c3b4a.
//
// Solidity: function getBlsPubKey(address operator) view returns(bytes)
func (_Committee *CommitteeSession) GetBlsPubKey(operator common.Address) ([]byte, error) {
	return _Committee.Contract.GetBlsPubKey(&_Committee.CallOpts, operator)
}

// GetBlsPubKey is a free data retrieval call binding the contract method 0x999c3b4a.
//
// Solidity: function getBlsPubKey(address operator) view returns(bytes)
func (_Committee *CommitteeCallerSession) GetBlsPubKey(operator common.Address) ([]byte, error) {
	return _Committee.Contract.GetBlsPubKey(&_Committee.CallOpts, operator)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeSession) GetChainId() (*big.Int, error) {
	return _Committee.Contract.GetChainId(&_Committee.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_Committee *CommitteeCallerSession) GetChainId() (*big.Int, error) {
	return _Committee.Contract.GetChainId(&_Committee.CallOpts)
}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeCaller) GetCommittee(opts *bind.CallOpts, chainID uint32, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getCommittee", chainID, blockNumber)

	outstruct := new(struct {
		CurrentCommittee ILagrangeCommitteeCommitteeData
		NextRoot         *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CurrentCommittee = *abi.ConvertType(out[0], new(ILagrangeCommitteeCommitteeData)).(*ILagrangeCommitteeCommitteeData)
	outstruct.NextRoot = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeSession) GetCommittee(chainID uint32, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetCommittee is a free data retrieval call binding the contract method 0xdef9e7d5.
//
// Solidity: function getCommittee(uint32 chainID, uint256 blockNumber) view returns((uint256,uint256,uint256) currentCommittee, uint256 nextRoot)
func (_Committee *CommitteeCallerSession) GetCommittee(chainID uint32, blockNumber *big.Int) (struct {
	CurrentCommittee ILagrangeCommitteeCommitteeData
	NextRoot         *big.Int
}, error) {
	return _Committee.Contract.GetCommittee(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeCaller) GetEpochNumber(opts *bind.CallOpts, chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getEpochNumber", chainID, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeSession) GetEpochNumber(chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x78d81d08.
//
// Solidity: function getEpochNumber(uint32 chainID, uint256 blockNumber) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetEpochNumber(chainID uint32, blockNumber *big.Int) (*big.Int, error) {
	return _Committee.Contract.GetEpochNumber(&_Committee.CallOpts, chainID, blockNumber)
}

// GetLeafHash is a free data retrieval call binding the contract method 0x5b7b108c.
//
// Solidity: function getLeafHash(address opAddr) view returns(uint256)
func (_Committee *CommitteeCaller) GetLeafHash(opts *bind.CallOpts, opAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getLeafHash", opAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLeafHash is a free data retrieval call binding the contract method 0x5b7b108c.
//
// Solidity: function getLeafHash(address opAddr) view returns(uint256)
func (_Committee *CommitteeSession) GetLeafHash(opAddr common.Address) (*big.Int, error) {
	return _Committee.Contract.GetLeafHash(&_Committee.CallOpts, opAddr)
}

// GetLeafHash is a free data retrieval call binding the contract method 0x5b7b108c.
//
// Solidity: function getLeafHash(address opAddr) view returns(uint256)
func (_Committee *CommitteeCallerSession) GetLeafHash(opAddr common.Address) (*big.Int, error) {
	return _Committee.Contract.GetLeafHash(&_Committee.CallOpts, opAddr)
}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeCaller) GetServeUntilBlock(opts *bind.CallOpts, operator common.Address) (uint32, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getServeUntilBlock", operator)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeSession) GetServeUntilBlock(operator common.Address) (uint32, error) {
	return _Committee.Contract.GetServeUntilBlock(&_Committee.CallOpts, operator)
}

// GetServeUntilBlock is a free data retrieval call binding the contract method 0x44a5c4bf.
//
// Solidity: function getServeUntilBlock(address operator) view returns(uint32)
func (_Committee *CommitteeCallerSession) GetServeUntilBlock(operator common.Address) (uint32, error) {
	return _Committee.Contract.GetServeUntilBlock(&_Committee.CallOpts, operator)
}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeCaller) GetSlashed(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "getSlashed", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeSession) GetSlashed(operator common.Address) (bool, error) {
	return _Committee.Contract.GetSlashed(&_Committee.CallOpts, operator)
}

// GetSlashed is a free data retrieval call binding the contract method 0x44f5b6b4.
//
// Solidity: function getSlashed(address operator) view returns(bool)
func (_Committee *CommitteeCallerSession) GetSlashed(operator common.Address) (bool, error) {
	return _Committee.Contract.GetSlashed(&_Committee.CallOpts, operator)
}

// IsLocked is a free data retrieval call binding the contract method 0x3d6a2679.
//
// Solidity: function isLocked(uint32 chainID) view returns(bool, uint256)
func (_Committee *CommitteeCaller) IsLocked(opts *bind.CallOpts, chainID uint32) (bool, *big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isLocked", chainID)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// IsLocked is a free data retrieval call binding the contract method 0x3d6a2679.
//
// Solidity: function isLocked(uint32 chainID) view returns(bool, uint256)
func (_Committee *CommitteeSession) IsLocked(chainID uint32) (bool, *big.Int, error) {
	return _Committee.Contract.IsLocked(&_Committee.CallOpts, chainID)
}

// IsLocked is a free data retrieval call binding the contract method 0x3d6a2679.
//
// Solidity: function isLocked(uint32 chainID) view returns(bool, uint256)
func (_Committee *CommitteeCallerSession) IsLocked(chainID uint32) (bool, *big.Int, error) {
	return _Committee.Contract.IsLocked(&_Committee.CallOpts, chainID)
}

// IsUnregisterable is a free data retrieval call binding the contract method 0x19a74c5f.
//
// Solidity: function isUnregisterable(address operator) view returns(bool, uint256)
func (_Committee *CommitteeCaller) IsUnregisterable(opts *bind.CallOpts, operator common.Address) (bool, *big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isUnregisterable", operator)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// IsUnregisterable is a free data retrieval call binding the contract method 0x19a74c5f.
//
// Solidity: function isUnregisterable(address operator) view returns(bool, uint256)
func (_Committee *CommitteeSession) IsUnregisterable(operator common.Address) (bool, *big.Int, error) {
	return _Committee.Contract.IsUnregisterable(&_Committee.CallOpts, operator)
}

// IsUnregisterable is a free data retrieval call binding the contract method 0x19a74c5f.
//
// Solidity: function isUnregisterable(address operator) view returns(bool, uint256)
func (_Committee *CommitteeCallerSession) IsUnregisterable(operator common.Address) (bool, *big.Int, error) {
	return _Committee.Contract.IsUnregisterable(&_Committee.CallOpts, operator)
}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeCaller) IsUpdatable(opts *bind.CallOpts, chainID uint32, epochNumber *big.Int) (bool, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "isUpdatable", chainID, epochNumber)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeSession) IsUpdatable(chainID uint32, epochNumber *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, chainID, epochNumber)
}

// IsUpdatable is a free data retrieval call binding the contract method 0x85ab9a7a.
//
// Solidity: function isUpdatable(uint32 chainID, uint256 epochNumber) view returns(bool)
func (_Committee *CommitteeCallerSession) IsUpdatable(chainID uint32, epochNumber *big.Int) (bool, error) {
	return _Committee.Contract.IsUpdatable(&_Committee.CallOpts, chainID, epochNumber)
}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, bool slashed, uint32 serveUntilBlock, uint256 unsubscribedBlockNumber)
func (_Committee *CommitteeCaller) Operators(opts *bind.CallOpts, arg0 common.Address) (struct {
	Amount                  *big.Int
	BlsPubKey               []byte
	Slashed                 bool
	ServeUntilBlock         uint32
	UnsubscribedBlockNumber *big.Int
}, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "operators", arg0)

	outstruct := new(struct {
		Amount                  *big.Int
		BlsPubKey               []byte
		Slashed                 bool
		ServeUntilBlock         uint32
		UnsubscribedBlockNumber *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.BlsPubKey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Slashed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.ServeUntilBlock = *abi.ConvertType(out[3], new(uint32)).(*uint32)
	outstruct.UnsubscribedBlockNumber = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, bool slashed, uint32 serveUntilBlock, uint256 unsubscribedBlockNumber)
func (_Committee *CommitteeSession) Operators(arg0 common.Address) (struct {
	Amount                  *big.Int
	BlsPubKey               []byte
	Slashed                 bool
	ServeUntilBlock         uint32
	UnsubscribedBlockNumber *big.Int
}, error) {
	return _Committee.Contract.Operators(&_Committee.CallOpts, arg0)
}

// Operators is a free data retrieval call binding the contract method 0x13e7c9d8.
//
// Solidity: function operators(address ) view returns(uint256 amount, bytes blsPubKey, bool slashed, uint32 serveUntilBlock, uint256 unsubscribedBlockNumber)
func (_Committee *CommitteeCallerSession) Operators(arg0 common.Address) (struct {
	Amount                  *big.Int
	BlsPubKey               []byte
	Slashed                 bool
	ServeUntilBlock         uint32
	UnsubscribedBlockNumber *big.Int
}, error) {
	return _Committee.Contract.Operators(&_Committee.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Committee *CommitteeCallerSession) Owner() (common.Address, error) {
	return _Committee.Contract.Owner(&_Committee.CallOpts)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCaller) Service(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "service")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// Service is a free data retrieval call binding the contract method 0xd598d4c9.
//
// Solidity: function service() view returns(address)
func (_Committee *CommitteeCallerSession) Service() (common.Address, error) {
	return _Committee.Contract.Service(&_Committee.CallOpts)
}

// TotalVotingPower is a free data retrieval call binding the contract method 0x8dfccad8.
//
// Solidity: function totalVotingPower(uint32 ) view returns(uint256)
func (_Committee *CommitteeCaller) TotalVotingPower(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "totalVotingPower", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalVotingPower is a free data retrieval call binding the contract method 0x8dfccad8.
//
// Solidity: function totalVotingPower(uint32 ) view returns(uint256)
func (_Committee *CommitteeSession) TotalVotingPower(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.TotalVotingPower(&_Committee.CallOpts, arg0)
}

// TotalVotingPower is a free data retrieval call binding the contract method 0x8dfccad8.
//
// Solidity: function totalVotingPower(uint32 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) TotalVotingPower(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.TotalVotingPower(&_Committee.CallOpts, arg0)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeCaller) UpdatedEpoch(opts *bind.CallOpts, arg0 uint32) (*big.Int, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "updatedEpoch", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeSession) UpdatedEpoch(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// UpdatedEpoch is a free data retrieval call binding the contract method 0x4db6f74a.
//
// Solidity: function updatedEpoch(uint32 ) view returns(uint256)
func (_Committee *CommitteeCallerSession) UpdatedEpoch(arg0 uint32) (*big.Int, error) {
	return _Committee.Contract.UpdatedEpoch(&_Committee.CallOpts, arg0)
}

// VoteWeigher is a free data retrieval call binding the contract method 0xef030673.
//
// Solidity: function voteWeigher() view returns(address)
func (_Committee *CommitteeCaller) VoteWeigher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Committee.contract.Call(opts, &out, "voteWeigher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VoteWeigher is a free data retrieval call binding the contract method 0xef030673.
//
// Solidity: function voteWeigher() view returns(address)
func (_Committee *CommitteeSession) VoteWeigher() (common.Address, error) {
	return _Committee.Contract.VoteWeigher(&_Committee.CallOpts)
}

// VoteWeigher is a free data retrieval call binding the contract method 0xef030673.
//
// Solidity: function voteWeigher() view returns(address)
func (_Committee *CommitteeCallerSession) VoteWeigher() (common.Address, error) {
	return _Committee.Contract.VoteWeigher(&_Committee.CallOpts)
}

// AddOperator is a paid mutator transaction binding the contract method 0x4edd2469.
//
// Solidity: function addOperator(address operator, bytes blsPubKey, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeTransactor) AddOperator(opts *bind.TransactOpts, operator common.Address, blsPubKey []byte, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "addOperator", operator, blsPubKey, serveUntilBlock)
}

// AddOperator is a paid mutator transaction binding the contract method 0x4edd2469.
//
// Solidity: function addOperator(address operator, bytes blsPubKey, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeSession) AddOperator(operator common.Address, blsPubKey []byte, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, blsPubKey, serveUntilBlock)
}

// AddOperator is a paid mutator transaction binding the contract method 0x4edd2469.
//
// Solidity: function addOperator(address operator, bytes blsPubKey, uint32 serveUntilBlock) returns()
func (_Committee *CommitteeTransactorSession) AddOperator(operator common.Address, blsPubKey []byte, serveUntilBlock uint32) (*types.Transaction, error) {
	return _Committee.Contract.AddOperator(&_Committee.TransactOpts, operator, blsPubKey, serveUntilBlock)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operator) returns()
func (_Committee *CommitteeTransactor) FreezeOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "freezeOperator", operator)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operator) returns()
func (_Committee *CommitteeSession) FreezeOperator(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.FreezeOperator(&_Committee.TransactOpts, operator)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operator) returns()
func (_Committee *CommitteeTransactorSession) FreezeOperator(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.FreezeOperator(&_Committee.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "initialize", initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeSession) Initialize(initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// Initialize is a paid mutator transaction binding the contract method 0x35876476.
//
// Solidity: function initialize(address initialOwner, address _poseidon1Elements, address _poseidon2Elements, address _poseidon3Elements, address _poseidon4Elements, address _poseidon5Elements, address _poseidon6Elements) returns()
func (_Committee *CommitteeTransactorSession) Initialize(initialOwner common.Address, _poseidon1Elements common.Address, _poseidon2Elements common.Address, _poseidon3Elements common.Address, _poseidon4Elements common.Address, _poseidon5Elements common.Address, _poseidon6Elements common.Address) (*types.Transaction, error) {
	return _Committee.Contract.Initialize(&_Committee.TransactOpts, initialOwner, _poseidon1Elements, _poseidon2Elements, _poseidon3Elements, _poseidon4Elements, _poseidon5Elements, _poseidon6Elements)
}

// RegisterChain is a paid mutator transaction binding the contract method 0x046684dc.
//
// Solidity: function registerChain(uint32 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeTransactor) RegisterChain(opts *bind.TransactOpts, chainID uint32, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "registerChain", chainID, epochPeriod, freezeDuration)
}

// RegisterChain is a paid mutator transaction binding the contract method 0x046684dc.
//
// Solidity: function registerChain(uint32 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeSession) RegisterChain(chainID uint32, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, epochPeriod, freezeDuration)
}

// RegisterChain is a paid mutator transaction binding the contract method 0x046684dc.
//
// Solidity: function registerChain(uint32 chainID, uint256 epochPeriod, uint256 freezeDuration) returns()
func (_Committee *CommitteeTransactorSession) RegisterChain(chainID uint32, epochPeriod *big.Int, freezeDuration *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.RegisterChain(&_Committee.TransactOpts, chainID, epochPeriod, freezeDuration)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Committee *CommitteeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Committee.Contract.RenounceOwnership(&_Committee.TransactOpts)
}

// SubscribeChain is a paid mutator transaction binding the contract method 0x6b11c38e.
//
// Solidity: function subscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactor) SubscribeChain(opts *bind.TransactOpts, operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "subscribeChain", operator, chainID)
}

// SubscribeChain is a paid mutator transaction binding the contract method 0x6b11c38e.
//
// Solidity: function subscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeSession) SubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.SubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// SubscribeChain is a paid mutator transaction binding the contract method 0x6b11c38e.
//
// Solidity: function subscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactorSession) SubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.SubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Committee *CommitteeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Committee.Contract.TransferOwnership(&_Committee.TransactOpts, newOwner)
}

// UnsubscribeChain is a paid mutator transaction binding the contract method 0x0e9f564b.
//
// Solidity: function unsubscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactor) UnsubscribeChain(opts *bind.TransactOpts, operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "unsubscribeChain", operator, chainID)
}

// UnsubscribeChain is a paid mutator transaction binding the contract method 0x0e9f564b.
//
// Solidity: function unsubscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeSession) UnsubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.UnsubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// UnsubscribeChain is a paid mutator transaction binding the contract method 0x0e9f564b.
//
// Solidity: function unsubscribeChain(address operator, uint32 chainID) returns()
func (_Committee *CommitteeTransactorSession) UnsubscribeChain(operator common.Address, chainID uint32) (*types.Transaction, error) {
	return _Committee.Contract.UnsubscribeChain(&_Committee.TransactOpts, operator, chainID)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactor) Update(opts *bind.TransactOpts, chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "update", chainID, epochNumber)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeSession) Update(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID, epochNumber)
}

// Update is a paid mutator transaction binding the contract method 0x3bc72805.
//
// Solidity: function update(uint32 chainID, uint256 epochNumber) returns()
func (_Committee *CommitteeTransactorSession) Update(chainID uint32, epochNumber *big.Int) (*types.Transaction, error) {
	return _Committee.Contract.Update(&_Committee.TransactOpts, chainID, epochNumber)
}

// UpdateOperatorAmount is a paid mutator transaction binding the contract method 0xdb45fb3d.
//
// Solidity: function updateOperatorAmount(address operator) returns()
func (_Committee *CommitteeTransactor) UpdateOperatorAmount(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _Committee.contract.Transact(opts, "updateOperatorAmount", operator)
}

// UpdateOperatorAmount is a paid mutator transaction binding the contract method 0xdb45fb3d.
//
// Solidity: function updateOperatorAmount(address operator) returns()
func (_Committee *CommitteeSession) UpdateOperatorAmount(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.UpdateOperatorAmount(&_Committee.TransactOpts, operator)
}

// UpdateOperatorAmount is a paid mutator transaction binding the contract method 0xdb45fb3d.
//
// Solidity: function updateOperatorAmount(address operator) returns()
func (_Committee *CommitteeTransactorSession) UpdateOperatorAmount(operator common.Address) (*types.Transaction, error) {
	return _Committee.Contract.UpdateOperatorAmount(&_Committee.TransactOpts, operator)
}

// CommitteeInitCommitteeIterator is returned from FilterInitCommittee and is used to iterate over the raw logs and unpacked data for InitCommittee events raised by the Committee contract.
type CommitteeInitCommitteeIterator struct {
	Event *CommitteeInitCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitCommittee represents a InitCommittee event raised by the Committee contract.
type CommitteeInitCommittee struct {
	ChainID        *big.Int
	Duration       *big.Int
	FreezeDuration *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInitCommittee is a free log retrieval operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) FilterInitCommittee(opts *bind.FilterOpts) (*CommitteeInitCommitteeIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "InitCommittee")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitCommitteeIterator{contract: _Committee.contract, event: "InitCommittee", logs: logs, sub: sub}, nil
}

// WatchInitCommittee is a free log subscription operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) WatchInitCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeInitCommittee) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "InitCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitCommittee)
				if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitCommittee is a log parse operation binding the contract event 0xd07f5f940c054019c6c46eed514ed7d35417d411b6f94c49ada89240be6c7fc4.
//
// Solidity: event InitCommittee(uint256 chainID, uint256 duration, uint256 freezeDuration)
func (_Committee *CommitteeFilterer) ParseInitCommittee(log types.Log) (*CommitteeInitCommittee, error) {
	event := new(CommitteeInitCommittee)
	if err := _Committee.contract.UnpackLog(event, "InitCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Committee contract.
type CommitteeInitializedIterator struct {
	Event *CommitteeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeInitialized represents a Initialized event raised by the Committee contract.
type CommitteeInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) FilterInitialized(opts *bind.FilterOpts) (*CommitteeInitializedIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CommitteeInitializedIterator{contract: _Committee.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CommitteeInitialized) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeInitialized)
				if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Committee *CommitteeFilterer) ParseInitialized(log types.Log) (*CommitteeInitialized, error) {
	event := new(CommitteeInitialized)
	if err := _Committee.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Committee contract.
type CommitteeOwnershipTransferredIterator struct {
	Event *CommitteeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeOwnershipTransferred represents a OwnershipTransferred event raised by the Committee contract.
type CommitteeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CommitteeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CommitteeOwnershipTransferredIterator{contract: _Committee.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CommitteeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Committee.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeOwnershipTransferred)
				if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Committee *CommitteeFilterer) ParseOwnershipTransferred(log types.Log) (*CommitteeOwnershipTransferred, error) {
	event := new(CommitteeOwnershipTransferred)
	if err := _Committee.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CommitteeUpdateCommitteeIterator is returned from FilterUpdateCommittee and is used to iterate over the raw logs and unpacked data for UpdateCommittee events raised by the Committee contract.
type CommitteeUpdateCommitteeIterator struct {
	Event *CommitteeUpdateCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CommitteeUpdateCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CommitteeUpdateCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CommitteeUpdateCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CommitteeUpdateCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CommitteeUpdateCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CommitteeUpdateCommittee represents a UpdateCommittee event raised by the Committee contract.
type CommitteeUpdateCommittee struct {
	ChainID *big.Int
	Current [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUpdateCommittee is a free log retrieval operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) FilterUpdateCommittee(opts *bind.FilterOpts) (*CommitteeUpdateCommitteeIterator, error) {

	logs, sub, err := _Committee.contract.FilterLogs(opts, "UpdateCommittee")
	if err != nil {
		return nil, err
	}
	return &CommitteeUpdateCommitteeIterator{contract: _Committee.contract, event: "UpdateCommittee", logs: logs, sub: sub}, nil
}

// WatchUpdateCommittee is a free log subscription operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) WatchUpdateCommittee(opts *bind.WatchOpts, sink chan<- *CommitteeUpdateCommittee) (event.Subscription, error) {

	logs, sub, err := _Committee.contract.WatchLogs(opts, "UpdateCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CommitteeUpdateCommittee)
				if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCommittee is a log parse operation binding the contract event 0xc6ee71ee195b28e5f3e5f5737bdae699800c460cc899508d730e8cc9eeedd908.
//
// Solidity: event UpdateCommittee(uint256 chainID, bytes32 current)
func (_Committee *CommitteeFilterer) ParseUpdateCommittee(log types.Log) (*CommitteeUpdateCommittee, error) {
	event := new(CommitteeUpdateCommittee)
	if err := _Committee.contract.UnpackLog(event, "UpdateCommittee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
